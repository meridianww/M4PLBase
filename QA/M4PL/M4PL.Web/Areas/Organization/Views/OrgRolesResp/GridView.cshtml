@*Copyright (2016) Meridian Worldwide Transportation Group
    //All Rights Reserved Worldwide
    //====================================================================================================================================================
    //Program Title:                                Meridian 4th Party Logistics(M4PL)
    //Programmer:                                   Akhil
    //Date Programmed:                              13/10/2017
    //Program Name:                                 OrgRefRoleView
    //Purpose:                                      Provides grid view for Organization's OrgRefRole
    //====================================================================================================================================================*@

@using M4PL.Entities
@using M4PL.Web.Models;
@using M4PL.Web.Providers;
@using M4PL.Utilities;
@using M4PL.APIClient.ViewModels.Organization;
@model GridResult<OrgRolesRespView>
@{
    ViewBag.Title = Model.PageName;
}

@Html.DevExpress().GridView(settings =>
{
    //settings.Name = (Model.GridSetting.CallBackRoute.IsPopup) ? string.Concat(Model.GridSetting.GridName, WebApplicationConstants.PopupSuffix) : Model.GridSetting.GridName;
    settings.Name = Model.GridSetting.GridName;
    settings.KeyFieldName = Model.GridViewModel.KeyFieldName;
    settings.Styles.Header.Wrap = DefaultBoolean.True;
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Visible;
    settings.Settings.VerticalScrollBarMode = ScrollBarMode.Visible;
    //settings.Settings.VerticalScrollableHeight = 300;
    settings.Settings.ShowFilterRow = Model.GridSetting.ShowFilterRow;
    settings.Settings.ShowFilterRowMenu = Model.GridSetting.ShowFilterRow;
    settings.Settings.ShowFilterBar = GridViewStatusBarMode.Auto;
    settings.SettingsBehavior.AllowFocusedRow = true;
    settings.SettingsBehavior.AllowEllipsisInText = true;
    settings.SettingsBehavior.AllowDragDrop = false;
    settings.SettingsCookies.CookiesID = Model.GridSetting.CallBackRoute.Controller;
    settings.SettingsCookies.Enabled = true;
    settings.SettingsCookies.StoreColumnsWidth = true;
    settings.SettingsCookies.StorePaging = false;
    settings.SettingsCookies.StoreGroupingAndSorting = false;

    settings.SettingsDataSecurity.AllowDelete = false;
    settings.SettingsDataSecurity.AllowEdit = false;
    settings.SettingsDataSecurity.AllowInsert = false;

    settings.ControlStyle.Paddings.Padding = System.Web.UI.WebControls.Unit.Pixel(0);
    settings.ControlStyle.Border.BorderWidth = System.Web.UI.WebControls.Unit.Pixel(1);
    settings.CallbackRouteValues = new { Action = Model.GridSetting.CallBackRoute.Action, Controller = Model.GridSetting.CallBackRoute.Controller, Area = Model.GridSetting.CallBackRoute.Area, strRoute = Newtonsoft.Json.JsonConvert.SerializeObject(Model.GridSetting.CallBackRoute) };
    settings.CustomBindingRouteValuesCollection.Add(GridViewOperationType.Paging, new { Action = Model.GridSetting.PagingCallBackRoute.Action, Controller = Model.GridSetting.PagingCallBackRoute.Controller, Area = Model.GridSetting.PagingCallBackRoute.Area, strRoute = Newtonsoft.Json.JsonConvert.SerializeObject(Model.GridSetting.PagingCallBackRoute), gridName = Model.GridSetting.GridName });
    settings.CustomBindingRouteValuesCollection.Add(GridViewOperationType.Filtering, new { Action = Model.GridSetting.FilteringCallBackRoute.Action, Controller = Model.GridSetting.FilteringCallBackRoute.Controller, Area = Model.GridSetting.FilteringCallBackRoute.Area, strRoute = Newtonsoft.Json.JsonConvert.SerializeObject(Model.GridSetting.FilteringCallBackRoute), gridName = Model.GridSetting.GridName });
    settings.CustomBindingRouteValuesCollection.Add(GridViewOperationType.Sorting, new { Action = Model.GridSetting.SortingCallBackRoute.Action, Controller = Model.GridSetting.SortingCallBackRoute.Controller, Area = Model.GridSetting.SortingCallBackRoute.Area, strRoute = Newtonsoft.Json.JsonConvert.SerializeObject(Model.GridSetting.SortingCallBackRoute), gridName = Model.GridSetting.GridName });

    settings.SettingsResizing.ColumnResizeMode = ColumnResizeMode.Control;
    settings.ClientSideEvents.ColumnResized = "M4PLWindow.DataView.OnColumnResized";
    settings.SettingsResizing.Visualization = ResizingMode.Live;
    settings.ControlStyle.CssClass = "gridfields-text-visible";

    settings.SettingsPager.EnableAdaptivity = true;
    settings.SettingsPager.PageSize = Model.GridSetting.PageSize;
    settings.SettingsPager.Position = System.Web.UI.WebControls.PagerPosition.TopAndBottom;
    settings.SettingsPager.FirstPageButton.Visible = true;
    settings.SettingsPager.LastPageButton.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Items = Model.GridSetting.AvailablePageSizes;

    settings.SettingsEditing.Mode = Model.GridSetting.Mode;
    settings.Columns.Clear();

    if (settings.SettingsEditing.Mode == GridViewEditingMode.Batch)
    {
        settings.SettingsEditing.BatchUpdateRouteValues = new { Action = Model.GridSetting.BatchUpdateCallBackRoute.Action, Controller = Model.GridSetting.BatchUpdateCallBackRoute.Controller, Area = Model.GridSetting.BatchUpdateCallBackRoute.Area, strRoute = Newtonsoft.Json.JsonConvert.SerializeObject(Model.GridSetting.BatchUpdateCallBackRoute), gridName = Model.GridSetting.GridName };
        settings.SettingsEditing.BatchEditSettings.EditMode = GridViewBatchEditMode.Row;
        settings.SettingsEditing.BatchEditSettings.StartEditAction = GridViewBatchStartEditAction.DblClick;
        settings.SettingsEditing.BatchEditSettings.HighlightDeletedRows = true;
        settings.SettingsEditing.BatchEditSettings.ShowConfirmOnLosingChanges = false;
        settings.SettingsEditing.BatchEditSettings.KeepChangesOnCallbacks = DefaultBoolean.False;
        settings.ClientSideEvents.BatchEditEndEditing = "M4PLWindow.DataView.OnBatchEditEndEditing";
        settings.ClientSideEvents.BatchEditStartEditing = string.Format("function(s, e){{ M4PLWindow.DataView.OnActRoleBatchEditStartEditing(s, e, '{0}', '{1}', {2}, '{3}', '{4}'); }}", Model.Permission <= Permission.ReadOnly, Model.SessionProvider.ActiveUser.RoleId, Model.SessionProvider.ActiveUser.OrganizationId, ReservedKeysEnum.StatusId.ToString(), OrgRefRoleColumns.OrgRoleTitle.ToString());
    }
    //if (Model.Permission == Permission.All)
    //{
    //    settings.CommandColumn.Visible = true;
    //    GridViewCommandColumnCustomButton customButton = new GridViewCommandColumnCustomButton();
    //    customButton.Text = Model.Operations[OperationTypeEnum.Delete].LangName;
    //    customButton.ID = "deleteButton";
    //    settings.CommandColumn.CustomButtons.Add(customButton);
    //    settings.CommandColumn.FixedStyle = GridViewColumnFixedStyle.Left;
    //    settings.CommandColumn.Width = System.Web.UI.WebControls.Unit.Pixel(65);
    //    settings.CommandColumn.AllowDragDrop = DefaultBoolean.False;
    //    settings.CommandColumn.ShowNewButtonInHeader = Model.GridSetting.ShowNewButton;
    //}

    var savedGridLayoutFromCache = WebUtilities.GetOrSetGridLayout(Model.GridSetting.CallBackRoute.Entity.ToString(), string.Empty);

    settings.Columns.Add(column =>
    {
        column.FieldName = WebApplicationConstants.ColPreviousStatusId;
        column.HeaderStyle.CssClass = CssConstants.HiddenColumn;
        column.EditCellStyle.CssClass = CssConstants.HiddenColumn;
        column.FilterCellStyle.CssClass = CssConstants.HiddenColumn;
        column.CellStyle.CssClass = CssConstants.HiddenColumn;
    });

    settings.Columns.Add(column =>
    {
        column.FieldName = OrgRefRoleColumns.OrgRoleContactID.ToString();
        column.HeaderStyle.CssClass = CssConstants.HiddenColumn;
        column.EditCellStyle.CssClass = CssConstants.HiddenColumn;
        column.FilterCellStyle.CssClass = CssConstants.HiddenColumn;
        column.CellStyle.CssClass = CssConstants.HiddenColumn;
    });

    foreach (var col in Model.ColumnSettings)
    {
        if (col.ColIsVisible && !col.ColColumnName.Equals(settings.KeyFieldName, StringComparison.OrdinalIgnoreCase)
        && !col.DataType.Equals(SQLDataTypes.image.ToString(), StringComparison.OrdinalIgnoreCase)
        && !col.DataType.Equals(SQLDataTypes.varbinary.ToString(), StringComparison.OrdinalIgnoreCase))
        {
            settings.Columns.Add(column =>
            {
                column.FieldName = col.ColColumnName;
                column.Caption = col.ColAliasName;
                column.ToolTip = col.ColCaption;
                column.ReadOnly = col.ColIsReadOnly;
                column.Visible = col.ColIsVisible;
                column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
                var colState = Model.SessionProvider.ViewPagedDataSession[Model.GridSetting.CallBackRoute.Entity].GridViewColumnState as GridViewColumnState;
                if (colState != null && colState.FieldName.Equals(column.FieldName, StringComparison.OrdinalIgnoreCase))
                {
                    column.SortOrder = colState.SortOrder;
                };


                if (string.IsNullOrWhiteSpace(savedGridLayoutFromCache))
                    column.Width = System.Web.UI.WebControls.Unit.Pixel(WebUtilities.GetPixel(col));
                column.FixedStyle = (col.ColIsFreezed) ? GridViewColumnFixedStyle.Left : GridViewColumnFixedStyle.None;

                if (col.ColColumnName.EndsWith(WebApplicationConstants.ItemNumber) || col.ColColumnName.EndsWith(WebApplicationConstants.SortOrder) || col.ColColumnName.EndsWith(WebApplicationConstants.LineOrder))
                    column.ReadOnly = true;

                if (col.DataType.Equals(SQLDataTypes.Name.ToString(), StringComparison.OrdinalIgnoreCase))
                {
                    column.FieldName = string.Concat(col.ColColumnName, SQLDataTypes.Name.ToString());
                    column.ReadOnly = true;
                    column.EditorProperties().TextBox(txtBox =>
                    {
                        col.MaxLength = WebUtilities.GetPixel(col);
                        txtBox.MaxLength = col.MaxLength;
                        column.CellStyle.CssClass = CssConstants.ReadOnlyBackgroundColor;
                    });

                    if (Enum.IsDefined(typeof(EntitiesAlias), col.RelationalEntity))
                    {
                        column.SetFilterTemplateContent(lookup =>
                        {
                            var longDropDownViewModel = FormViewProvider.GetLongDropDownForFilter(col.RelationalEntity, col.ColColumnName, col.ColAliasName, col.IsRequired, (Dictionary<string, string>)ViewData[MvcConstants.Filters], column.FieldName, Model.Permission, Model.GridSetting.CallBackRoute.ParentRecordId);
                            longDropDownViewModel.HideLabel = true;
                            longDropDownViewModel.EntityFor = EntitiesAlias.OrgRolesResp;
                            longDropDownViewModel.ValueChangedEvent = string.Format("function(s, e) {{M4PLWindow.DataView.OnComboBoxValueChanged(s, e, {0}, '{1}'); }}", Model.GridSetting.GridName, column.FieldName);

                            IList<M4PL.Entities.Support.RefSetting> _settings = (IList<M4PL.Entities.Support.RefSetting>)Model.SessionProvider.UserSettings.Settings;
                            var userFieldSetting = _settings.FirstOrDefault(t => t.Entity == Model.GridSetting.CallBackRoute.Entity && t.Value == col.ColColumnName && t.Name == WebApplicationConstants.ReadOnlyRelationalEntity);

                            if (userFieldSetting == null)
                            {
                                ViewContext.Writer.Write(Html.Action(MvcConstants.ActionDropDownViewTemplate, EntitiesAlias.Common.ToString(), new { Area = string.Empty, strDropDownViewModel = Newtonsoft.Json.JsonConvert.SerializeObject(longDropDownViewModel), selectedId = 0 }));
                            }
                            else
                            {
                                if (Model.Records.Any())
                                {
                                    var relationalFieldIdValue = Model.Records.FirstOrDefault().GetValueFromObject(col.ColColumnName);
                                    var relationalFieldIdNameValue = Model.Records.FirstOrDefault().GetValueFromObject(column.FieldName);
                                    ViewData[MvcConstants.ColumnSettings] = Model.ColumnSettings;
                                    if (ViewContext != null)
                                    {
                                        ViewContext.Writer.Write(Html.EditorFor(m => relationalFieldIdValue, MvcConstants.EditorReadOnlyTextBoxTemplate, new { CurrentValue = relationalFieldIdNameValue, CurrentName = col.ColColumnName }).ToHtmlString());
                                    }
                                }
                            }
                        });
                    }
                }

                else if (col.DataType.Equals(SQLDataTypes.bit.ToString(), StringComparison.OrdinalIgnoreCase))
                {
                    column.EditorProperties().CheckBox(chckBx =>
                    {
                        if (column.ReadOnly)
                            column.CellStyle.CssClass = CssConstants.ReadOnlyBackgroundColor;
                    });
                }
                else if (col.DataType.Equals(SQLDataTypes.datetime2.ToString(), StringComparison.OrdinalIgnoreCase))
                {
                    column.CellStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Right;
                    column.ColumnType = MVCxGridViewColumnType.DateEdit;
                    column.PropertiesEdit.DisplayFormatString = col.ColDisplayFormat;

                }
                else if (ViewData[WebApplicationConstants.CommonCommand] != null && col.ColLookupId > 0 && ViewData[WebApplicationConstants.CommonCommand] is M4PL.APIClient.Common.ICommonCommands)
                {
                    column.SetFilterTemplateContent(lookup =>
                    {
                        var allIdRefLangNames = (IList<M4PL.Entities.Support.IdRefLangName>)(ViewData[WebApplicationConstants.CommonCommand] as M4PL.APIClient.Common.ICommonCommands).GetIdRefLangNames(col.ColLookupId);
                        if (col.ColLookupId == LookupEnums.Status.ToInt())
                        {
                            var allStatuses = Model.SessionProvider.UserSettings.Settings.GetSystemSettingValue(WebApplicationConstants.SysStatusesIn);
                            if (!string.IsNullOrWhiteSpace(allStatuses))
                            {
                                var allStatus = allStatuses.SplitComma().ToList();
                                allIdRefLangNames = allIdRefLangNames.Where(x => allStatus.Contains(x.SysRefId.ToString())).ToList();
                            }
                        }
                        var allFilters = (Dictionary<string, string>)ViewData[MvcConstants.Filters];
                        string relatedValue = null;
                        allFilters.TryGetValue(column.FieldName, out relatedValue);

                        ViewContext.Writer.Write(Html.DevExpress().ComboBox(cs =>
                        {
                            cs.Name = "Filter" + Model.GridSetting.CallBackRoute.Controller + col.ColColumnName;
                            cs.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                            cs.Properties.ClientInstanceName = col.ColColumnName;
                            cs.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.Always;
                            cs.Properties.TextField = "LangName";
                            cs.Properties.ValueField = col.DataType.Equals(SQLDataTypes.nvarchar.ToString(), StringComparison.OrdinalIgnoreCase) ? "LangName" : "SysRefId";
                            cs.Properties.ValueType = col.DataType.Equals(SQLDataTypes.nvarchar.ToString(), StringComparison.OrdinalIgnoreCase) ? typeof(string) : typeof(int);
                            cs.Properties.ClientSideEvents.SelectedIndexChanged = string.Format("function(s, e) {{M4PLWindow.DataView.OnComboBoxValueChanged(s, e, {0}, '{1}'); }}", Model.GridSetting.GridName, column.FieldName);
                            cs.PreRender = (sender, e) =>
                            {
                                if (!string.IsNullOrWhiteSpace(relatedValue))
                                {
                                    MVCxComboBox cmb = sender as MVCxComboBox;
                                    if (col.DataType.Equals(SQLDataTypes.nvarchar.ToString(), StringComparison.OrdinalIgnoreCase))
                                    {
                                        cmb.Value = Convert.ToString(relatedValue);
                                    }
                                    else
                                    {
                                        cmb.Value = Convert.ToInt32(relatedValue);
                                    }
                                }
                            };
                            if (col.ColIsReadOnly)
                            {
                                cs.ControlStyle.CssClass = CssConstants.ReadOnlyBackgroundColor;
                            }
                        }).BindList(allIdRefLangNames).GetHtml().ToHtmlString());
                    });
                    column.EditorProperties().ComboBox(cs =>
                    {
                        cs.ClientInstanceName = col.ColColumnName;
                        cs.TextField = "LangName";
                        cs.ValueField = col.DataType.Equals(SQLDataTypes.nvarchar.ToString(), StringComparison.OrdinalIgnoreCase) ? "LangName" : "SysRefId";
                        cs.ValueType = col.DataType.Equals(SQLDataTypes.nvarchar.ToString(), StringComparison.OrdinalIgnoreCase) ? typeof(string) : typeof(int);
                        cs.DataSource = (ViewData[WebApplicationConstants.CommonCommand] as M4PL.APIClient.Common.ICommonCommands).GetIdRefLangNames(col.ColLookupId);
                    });
                }
                else if (col.DataType.Equals(SQLDataTypes.Char.ToString(), StringComparison.OrdinalIgnoreCase) || col.DataType.Equals(SQLDataTypes.nvarchar.ToString(), StringComparison.OrdinalIgnoreCase)
        || col.DataType.Equals(SQLDataTypes.varchar.ToString(), StringComparison.OrdinalIgnoreCase) || col.DataType.Equals(SQLDataTypes.Name.ToString(), StringComparison.OrdinalIgnoreCase))
                {
                    column.EditorProperties().TextBox(txtBox =>
                    {
                        txtBox.MaxLength = col.MaxLength;
                        if (column.ReadOnly)
                            column.CellStyle.CssClass = CssConstants.ReadOnlyBackgroundColor;
                    });
                }
                else if (col.DataType.Equals(SQLDataTypes.Int.ToString(), StringComparison.OrdinalIgnoreCase) || col.DataType.Equals(SQLDataTypes.bigint.ToString(), StringComparison.OrdinalIgnoreCase))
                {
                    column.EditorProperties().SpinEdit(spn =>
                    {
                        spn.NumberType = SpinEditNumberType.Integer;
                        spn.MinValue = 0;
                        spn.MaxValue = col.DataType.Equals(SQLDataTypes.Int.ToString(), StringComparison.OrdinalIgnoreCase) ? Int32.MaxValue : Int64.MaxValue;
                        spn.Style.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Right;
                        if (column.ReadOnly)
                        {
                            column.CellStyle.CssClass = CssConstants.ReadOnlyBackgroundColor;
                            spn.SpinButtons.ClientVisible = false;
                        }
                    });
                }

                else if (col.DataType.Equals(SQLDataTypes.Decimal.ToString(), StringComparison.OrdinalIgnoreCase))
                {
                    column.EditorProperties().SpinEdit(spn =>
                    {
                        spn.NumberType = SpinEditNumberType.Float;
                        if (!col.ColAllowNegativeValue)
                        {
                            spn.MinValue = 0;
                            spn.MaxValue = Decimal.MaxValue;
                        }
                        spn.DecimalPlaces = 2;
                        spn.MaxLength = 18;
                        spn.Style.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Right;
                        if (column.ReadOnly)
                        {
                            column.CellStyle.CssClass = CssConstants.ReadOnlyBackgroundColor;
                            spn.SpinButtons.ClientVisible = false;
                        }
                    });
                }
            });
        }
    }

    //Saving Layout
    settings.ClientLayout = (sender, e) =>
    {
        if (e.LayoutMode == ClientLayoutMode.Saving)
            WebUtilities.GetOrSetGridLayout(Model.GridSetting.CallBackRoute.Entity.ToString(), e.LayoutData);
        else
        {
            var layout = WebUtilities.GetOrSetGridLayout(Model.GridSetting.CallBackRoute.Entity.ToString(), string.Empty);
        }
    };
    //End saving layout

    //For Advanced Filter
    settings.FilterControlOperationVisibility = (sender, e) =>
    {
        WebUtilities.ChangeFilterControlOperationVisibility((MVCxGridViewColumn)((MVCxGridView)sender).Columns[e.PropertyInfo.PropertyName], e);
    };

    settings.SettingsContextMenu.Enabled = true;
    settings.ClientSideEvents.ContextMenuItemClick = "function(s, e){ M4PLWindow.DataView.OnContextMenu(s, e, '" + WebExtension.ConvertByteToString(Model.Icon) + "', '" + MvcConstants.ActionChooseColumn + "', '" + MvcConstants.ActionCopyRecord + "'); }";
    settings.ClientSideEvents.ContextMenu = "function(s, e){ M4PLWindow.DataView.ContextMenu(s, e, " + Model.GridSetting.GridName + ", '" + "False" + "'); }";
    settings.FillContextMenuItems = (sender, e) =>
    {
        e.Items.Clear();
        if (e.MenuType == GridViewContextMenuType.Rows)
        {
            foreach (var contexMenu in Model.GridSetting.ContextMenu)
            {
                var command = e.CreateItem(contexMenu.LangName, Newtonsoft.Json.JsonConvert.SerializeObject(contexMenu.Route));
                command.Image.Url = WebExtension.ConvertByteToString(contexMenu.Icon);
                command.Enabled = true;
                //e.Items.Add(command);
            }
        }
    };

    settings.Init += (s, e) =>
    {
        var grid = (MVCxGridView)s;
        grid.ForceDataRowType(Model.GridSetting.DataRowType);
    };


    settings.BeforeGetCallbackResult += (s, e) =>
    {
        var grid = (MVCxGridView)s;
        var colState = Model.SessionProvider.ViewPagedDataSession[Model.GridSetting.CallBackRoute.Entity].GridViewColumnState as GridViewColumnState;

        grid.ClearSort();

        if (colState != null)
        {
            grid.SortBy(grid.Columns[colState.FieldName], colState.SortOrder);
        }
    };


    settings.Styles.StatusBar.CssClass = "StatusBarWithButtons";
    settings.SetStatusBarTemplateContent(c =>
    {
        var saveRoute = (M4PL.Entities.Support.MvcRoute)Model.GridSetting.CallBackRoute;//conversion needed as dyamic has no applicable extension method.
        saveRoute.Url = Url.Action(MvcConstants.ActionCheckRecordUsed, Model.GridSetting.CallBackRoute.Controller, new { Area = Model.GridSetting.CallBackRoute.Area, strRoute = Newtonsoft.Json.JsonConvert.SerializeObject(saveRoute) });
        Html.DevExpress().Button(btnSaveSettings =>
        {
            btnSaveSettings.Name = "btnSave" + Model.GridSetting.GridName;//The name standard dependent on Ribbon's 'Save' functionality.Please make changes BaseController 'Ribbon' region 'Save' action and dependency on window.js _setCustomButtonsVisibility
            btnSaveSettings.EnableTheming = true;
            btnSaveSettings.Text = Model.Operations[OperationTypeEnum.SaveChanges].LangName;
            btnSaveSettings.ClientSideEvents.Click = "function(s, e){ M4PLWindow.DataView.OnUpdateEdit(" + Model.GridSetting.GridName + ", e, " + Newtonsoft.Json.JsonConvert.SerializeObject(saveRoute) + ");}";
            btnSaveSettings.AllowFocus = false;
            btnSaveSettings.ControlStyle.CssClass = "form-btn";
        }).Render();

        ViewContext.Writer.Write("&nbsp;&nbsp;&nbsp;");
        Html.DevExpress().Button(btnCancelSettings =>
        {
            btnCancelSettings.Name = "btnCancel" + Model.GridSetting.GridName;//dependency on window.js _setCustomButtonsVisibility
            btnCancelSettings.EnableTheming = true;
            btnCancelSettings.Text = Model.Operations[OperationTypeEnum.CancelChanges].LangName;
            btnCancelSettings.ClientSideEvents.Click = "function(s, e){ M4PLWindow.DataView.OnCancelEdit(" + Model.GridSetting.GridName + ", e);}";
            btnCancelSettings.AllowFocus = false;
            btnCancelSettings.ControlStyle.CssClass = "form-btn";
        }).Render();
    });

    settings.ClientSideEvents.BeginCallback = "M4PLWindow.DataView.OnBeginCallback";

    settings.ClientSideEvents.Init = "function(s, e){ M4PLWindow.DataView.OnInit(s, e, null, '" + Convert.ToBoolean(ViewData[WebApplicationConstants.ClearFilterManually]) + "'); }";
    settings.ClientSideEvents.EndCallback = "M4PLWindow.DataView.OnEndCallback";
    settings.ClientSideEvents.CustomButtonClick = "M4PLWindow.DataView.OnCustomButtonClick";
    settings.ClientSideEvents.CallbackError = "M4PLCommon.Common.OnCallbackError";

    settings.CellEditorInitialize = (s, e) =>
    {
        ASPxEdit editor = (ASPxEdit)e.Editor;
        editor.ValidationSettings.Display = Display.None;
    };
    settings.CustomJSProperties = (s, e) =>
    {
        e.Properties["cpBatchEditDisplayRoute"] = ViewData[WebApplicationConstants.GridBatchEditDisplayMessage];

        MVCxGridView grid = s as MVCxGridView;
        int startVisibleIndex = grid.VisibleStartIndex;
        int endVisibleIndex = startVisibleIndex + grid.SettingsPager.PageSize - 1;
        int visibleCount = grid.VisibleRowCount - 1;
        if (visibleCount < endVisibleIndex)
        {
            endVisibleIndex = visibleCount;
        }
        Dictionary<string, Dictionary<string, object>> rowHashes = TempData["RowHashes"] as Dictionary<string, Dictionary<string, object>>;
        for (int i = startVisibleIndex; i <= endVisibleIndex; i++)
        {
            var id = grid.GetRowValues(i, grid.KeyFieldName);
            if (id != null)
            {
                if (!rowHashes.ContainsKey(id.ToString()))
                    rowHashes.Add(id.ToString(), new Dictionary<string, object>());
                rowHashes[id.ToString()] = new Dictionary<string, object>();
                foreach (var col in Model.ColumnSettings)
                {

                    if (!col.ColIsVisible && !col.ColColumnName.Equals(settings.KeyFieldName, StringComparison.OrdinalIgnoreCase)
                    && !col.DataType.Equals(SQLDataTypes.image.ToString(), StringComparison.OrdinalIgnoreCase)
                    && !col.DataType.Equals(SQLDataTypes.varbinary.ToString(), StringComparison.OrdinalIgnoreCase))
                    {
                        rowHashes[grid.GetRowValues(i, grid.KeyFieldName).ToString()].Add(col.ColColumnName, grid.GetRowValues(i, col.ColColumnName));
                    }
                }
            }
        }
        TempData["RowHashes"] = rowHashes;
    };

    settings.CustomColumnDisplayText = (s, e) =>
    {
        if (e.Column.FieldName == "SysPassword")
        {
            e.DisplayText = "**********";
            e.Column.ReadOnly = true;
            e.Column.CellStyle.CssClass = CssConstants.ReadOnlyBackgroundColor;
        }
        if (e.Column.FieldName.Equals(WebApplicationConstants.PehSendReceive, StringComparison.OrdinalIgnoreCase))
        {
            e.DisplayText = e.Value.ToBoolean() ? "Receive" : "Send";
            e.Column.ReadOnly = true;
            e.Column.CellStyle.CssClass = CssConstants.ReadOnlyBackgroundColor;
        }

        if (e.Column.FieldName.Equals(MenuDriverColumns.MnuClassificationId.ToString(), StringComparison.OrdinalIgnoreCase))
        {
            var gr = s as MVCxGridView;
            var isRibbon = gr.GetRowValues(e.VisibleIndex, MenuDriverColumns.MnuRibbon.ToString());
            if (isRibbon != null && e.Value != null)
            {
                var lookupId = isRibbon.ToBoolean() ? LookupEnums.RibbonClassification.ToInt() : LookupEnums.MenuClassification.ToInt();
                var distext = (ViewData[WebApplicationConstants.CommonCommand] as M4PL.APIClient.Common.ICommonCommands).GetIdRefLangNames(lookupId);

                if (distext.Count > 0)
                    e.DisplayText = distext.FirstOrDefault(c => c.SysRefId == e.Value.ToInt()).SysRefName;
            }
        }
    };

    settings.PreRender = (s, e) =>
    {
        var grid = (MVCxGridView)s;
        if (Model.GridSetting.ChildGridRoute != null && Model.GridSetting.ChildGridRoute.Entity != Model.GridSetting.CallBackRoute.Entity && Model.GridSetting.ChildGridRoute.ParentRecordId > 0)
        {
            grid.DetailRows.ExpandRowByKey(Model.GridSetting.ChildGridRoute.ParentRecordId);
        }
        if (Model.FocusedRowId > 0)
            grid.FocusedRowIndex = grid.FindVisibleIndexByKeyValue(Model.FocusedRowId);
    };

}).Bind(null).BindToCustomData(Model.GridViewModel).GetHtml()