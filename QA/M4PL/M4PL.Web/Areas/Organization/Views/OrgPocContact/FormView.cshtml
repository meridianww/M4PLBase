@*Copyright (2016) Meridian Worldwide Transportation Group
    //All Rights Reserved Worldwide
    //====================================================================================================================================================
    //Program Title:                                Meridian 4th Party Logistics(M4PL)
    //Programmer:                                   Akhil
    //Date Programmed:                              13/10/2017
    //Program Name:                                 OrgPocContactFormView
    //Purpose:                                      Provides view for Organization's Poc contacts
    //====================================================================================================================================================*@

@using M4PL.Entities
@using M4PL.Entities.Support;
@using System.Web.UI.WebControls
@using M4PL.Web.Providers
@model  M4PL.Web.Models.FormResult<M4PL.APIClient.ViewModels.Organization.OrgPocContactView>
@{
    ViewBag.Title = Model.PageName;
    var contactDropDownModel = Model.Record.ContactMSTRID.GetValueOrDefault().GetContactDropDown("ContactMSTRID", Model, (Model.Record.ParentId > 0) ? Model.Record.ParentId : Model.SessionProvider.ActiveUser.OrganizationId, Model.Record.CompanyId);
    contactDropDownModel.EntityFor = EntitiesAlias.OrgPocContactInfo;
    contactDropDownModel.ParentEntity = EntitiesAlias.OrgPocContact;
    //contactDropDownModel.CompanyId = Model.Record.ConCompanyId;
    var roleCodeDropDownViewModel = Model.Record.ConCodeId.GetValueOrDefault().GetOrgRefRoleDropDown("ConCodeId", Model.ColumnSettings.FirstOrDefault("ConCodeId").ColAliasName, Model.ColumnSettings.FirstOrDefault("ConCodeId").IsRequired, Model.IsPopUp, Model.Permission, Model.Record.ParentId, EntitiesAlias.OrgPocContact);
    Model.Record.ConItemNumber = Model.Record.Id == 0 ? Model.Record.ItemNumber : Model.Record.ConItemNumber;
    Model.Record.ArbRecordId = Model.Record.Id == 0 ? new Random().Next(-1000, 0) : Model.Record.Id;
}

@if (!Model.IsPopUp && (Model.Record.Id > 0))
{
    @Html.Partial(MvcConstants.NavigationPanePartial, Model.NavigationPane);
}

    @*This code is moved up because subpopup rendering inside the form when the RichEditor with TabPageControl Exist*@
    @Html.Action("RecordSubPopupControl", "Popup", new { Area = string.Empty, strRoute = string.Empty, strByteArray = string.Empty })


    @using (Html.BeginForm(MvcConstants.ActionAddOrEdit, Model.CallBackRoute.Controller, FormMethod.Post, new { id = Model.FormId, @class = "col-lg-12 col-md-12" }))
    {
        ViewContext.Writer.Write("<div class='rich-text-editor'>");
        @Html.DevExpress().RoundPanel(settings =>
   {
       settings.Name = "pnlPocContact";
       settings.Width = Unit.Percentage(100);
       settings.AllowCollapsingByHeaderClick = true;
       settings.ShowCollapseButton = true;
       settings.HeaderText = "Detail";
       settings.Collapsed = false;
       settings.ControlStyle.CssClass = "form-layout";
       settings.SetContent(() =>
       {
           ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.ArbRecordId, new { Name = "ArbRecordId" }).ToHtmlString());
           ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.ParentId, new { Name = "ParentId" }).ToHtmlString());
           ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.CompanyId, new { Name = "CompanyId" }).ToHtmlString());
           ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.ConCompanyId, new { Name = "ConCompanyId" }).ToHtmlString());
           ViewContext.Writer.Write("<div class='full-width'>");
           ViewContext.Writer.Write("<div class='col-sm-12 col-md-12 col-lg-12 no-padding'>");
           ViewContext.Writer.Write("<div class='form-row-group col-fixed-10'>" + Html.EditorFor(m => m.Record.Id).ToHtmlString() + "</div>");
           ViewContext.Writer.Write("<div class='form-row-group col-fixed-5 iteminput-hide'>" + Html.EditorFor(m => m.Record.ConItemNumber).ToHtmlString() + "</div>");
           ViewContext.Writer.Write("<div class='form-row-group col-fixed-17'>" + Html.Action(MvcConstants.ActionDropDownViewTemplate, EntitiesAlias.Common.ToString(), new { Area = string.Empty, strDropDownViewModel = Newtonsoft.Json.JsonConvert.SerializeObject(roleCodeDropDownViewModel) }) + "</div>");
           ViewContext.Writer.Write("<div class='form-row-group col-fixed-50'>" + Html.EditorFor(m => m.Record.ConTitle).ToHtmlString() + "</div>");
           ViewContext.Writer.Write("</div>");
           ViewContext.Writer.Write("<div class='col-sm-12 col-md-12 col-lg-12 no-padding'>");
           ViewContext.Writer.Write("<div class='form-row-group poc-contactfields form-height-auto'>" + Html.Action(MvcConstants.ActionContactComboBox, M4PL.Entities.EntitiesAlias.Common.ToString(), new { Area = string.Empty, strDropDownViewModel = Newtonsoft.Json.JsonConvert.SerializeObject(contactDropDownModel) }) + "</div>");
           ViewContext.Writer.Write("<div class='form-row-group col-fixed-5'>" + Html.EditorFor(m => m.Record.ConIsDefault).ToHtmlString() + "</div>");
           ViewContext.Writer.Write("<div class='form-row-group col-fixed-10'>" + Html.EditorFor(m => m.Record.StatusId, new { StatusId = Model.Record.StatusId }).ToHtmlString() + "</div>");
           ViewContext.Writer.Write("<div class='form-row-group col-fixed-15'>" + Html.EditorFor(m => m.Record.ConTableTypeId, new { PocTypeId = Model.Record.ConTableTypeId }).ToHtmlString() + "</div>");

           ViewContext.Writer.Write("</div>");

       });
   }).GetHtml()

        @Html.DevExpress().RoundPanel(settings =>
{
    settings.Name = "pnlPocDescComment";
    settings.Width = Unit.Percentage(100);
    settings.AllowCollapsingByHeaderClick = true;
    settings.ShowCollapseButton = true;
    settings.HeaderText = "Description And Instructions";
    settings.Collapsed = true;
    settings.ControlStyle.CssClass = "form-layout";
    settings.SetContent(() =>
    {

        Html.DevExpress().PageControl(pageControlSettings =>
        {
            pageControlSettings.Name = "pageControlOrgPocContact";
            pageControlSettings.Width = Unit.Percentage(100);
            pageControlSettings.EnableTabScrolling = true;
            pageControlSettings.TabPages.Clear();
            pageControlSettings.TabPages.Add(page =>
            {
                var currentColumnSettings = Model.ColumnSettings.FirstOrDefault(ByteArrayFields.ConDescription.ToString());
                page.Name = currentColumnSettings.ColColumnName;
                page.Text = currentColumnSettings.ColAliasName;
                page.SetContent(() =>
                {
                    Html.RenderAction(MvcConstants.ActionRichEditDescription, Model.CallBackRoute.Controller, new { Area = Model.CallBackRoute.Area, docId = new M4PL.Entities.Support.Filter { FieldName = "ArbRecordId", Value = Model.Record.ArbRecordId.ToString() }, viewRecord = Model.Record, isPopup = Model.IsPopUp });
                });
            });
            pageControlSettings.TabPages.Add(page =>
            {
                var currentColumnSettings = Model.ColumnSettings.FirstOrDefault(ByteArrayFields.ConInstruction.ToString());
                page.Name = currentColumnSettings.ColColumnName;
                page.Text = currentColumnSettings.ColAliasName;
                page.SetContent(() =>
                {
                    Html.RenderAction(MvcConstants.ActionRichEditInstructions, Model.CallBackRoute.Controller, new { Area = Model.CallBackRoute.Area, viewRecord = Model.Record, docId = new M4PL.Entities.Support.Filter { FieldName = "ArbRecordId", Value = Model.Record.ArbRecordId.ToString() } });
                });
            });

        }).GetHtml();


    });
}).GetHtml()



        @Html.Partial(MvcConstants.EnteredChangedPartial, new M4PL.Web.Models.FormResult<BaseModel> { Record = Model.Record, ColumnSettings = Model.ColumnSettings, FormId = Model.FormId, IsPopUp = Model.IsPopUp })

        if (!Model.IsPopUp)
        {
            <div class="form-btns-block">
                <div class="half-width">
                    @Html.DevExpress().Button(settings =>
           {
               settings.Name = "btn" + Model.CallBackRoute.Controller + "Save";//The name standard dependent on Ribbon's 'Save' functionality.Please make changes BaseController 'Ribbon' region 'Save' action
               settings.EnableTheming = true;
               settings.Text = (Model.Record.Id > 0) ? Model.Operations[OperationTypeEnum.Update].LangName : Model.Operations[OperationTypeEnum.Save].LangName;
               settings.AllowFocus = false;
               settings.ControlStyle.CssClass = "form-btn pull-right";
               settings.Enabled = (Model.Record.Id > 0) ? !(Model.Permission < Permission.EditAll) : !(Model.Permission < Permission.AddEdit);
               settings.ClientSideEvents.Click = Model.SubmitClick;
               settings.Images.Image.Url = WebExtension.ConvertByteToString(Model.Operations[(Model.Record.Id > 0) ? OperationTypeEnum.Edit : OperationTypeEnum.New].Icon);
           }).GetHtml()
                </div>
                <div class="half-width">
                    @Html.DevExpress().Button(settings =>
       {
           settings.Name = "btn" + Model.CallBackRoute.Controller + "Cancel";
           settings.EnableTheming = true;
           settings.Text = Model.Operations[OperationTypeEnum.Cancel].LangName;
           settings.AllowFocus = false;
           settings.ControlStyle.CssClass = "form-btn pull-left";
           settings.ClientSideEvents.Click = Model.CancelClick; settings.Images.Image.Url = WebExtension.ConvertByteToString(Model.Operations[OperationTypeEnum.Cancel].Icon);
       }).GetHtml()
                </div>
            </div>
        }

        ViewContext.Writer.Write("</div>");
    }
