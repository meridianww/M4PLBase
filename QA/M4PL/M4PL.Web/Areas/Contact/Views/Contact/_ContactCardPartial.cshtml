@*Copyright (2016) Meridian Worldwide Transportation Group
    
    //====================================================================================================================================================
    //Program Title:                                Meridian 4th Party Logistics(M4PL)
    //Programmer:                                   Kirty Anurag
    //Date Programmed:                              13/10/2017
    //Program Name:                                 _ContactCardPartial
    //Purpose:                                      Provides view for Contact Card Pop up
    //====================================================================================================================================================*@
@using M4PL.Entities
@using M4PL.Entities.Support;
@using System.Web.UI.WebControls
@using System.Web.Mvc
@using M4PL.Web.Providers
@model  M4PL.Web.Models.FormResult<M4PL.APIClient.ViewModels.Contact.ContactView>
@{
    M4PL.APIClient.Common.ICommonCommands _commonCommands = null;
    
    if (ViewData[WebApplicationConstants.CommonCommand] is M4PL.APIClient.Common.ICommonCommands)
    {
        _commonCommands = ViewData[WebApplicationConstants.CommonCommand] as M4PL.APIClient.Common.ICommonCommands;
    }
    
    ViewBag.Title = Model.PageName;
    var businessStateDropDownViewModel = Model.Record.ConBusinessStateId.GetValueOrDefault().GetStateDropDown("ConBusinessStateId", Model.ColumnSettings.FirstOrDefault("ConBusinessStateId").ColAliasName, Model.ColumnSettings.FirstOrDefault("ConBusinessStateId").IsRequired, Model.IsPopUp, Model.Permission);
    Model.Record.ConCompanyId = Model.Record.ConCompanyId.HasValue && Model.Record.ConCompanyId > 0 ? Model.Record.ConCompanyId : Model.Record.CompanyId;
    var ConCompanyDropDownViewModel = Model.Record.ConCompanyId.GetValueOrDefault().GetCompanyDropDown("ConCompanyId", Model, (Model.Record.ParentId > 0) ? Model.Record.ParentId : Model.SessionProvider.ActiveUser.OrganizationId);
    ConCompanyDropDownViewModel.EntityFor = M4PL.Entities.EntitiesAlias.Contact;
    
    if (Model.CallBackRoute.OwnerCbPanel != "JobDriverIdCbPanel")
    {
        ConCompanyDropDownViewModel.ValueChangedEvent = string.Format("function(s, e) {{M4PLWindow.DataView.OnCompanyComboBoxValueChanged(s, e, {0}); }}", ConCompanyDropDownViewModel.SelectedId);
    }

    if (Model.CallBackRoute.OwnerCbPanel == "PvlContactMSTRIDCbPanel")
    {
        ConCompanyDropDownViewModel.EntityFor = M4PL.Entities.EntitiesAlias.PrgVendLocation;
    }
    else if (Model.CallBackRoute.OwnerCbPanel == "JobDriverIdCbPanel" || Model.CallBackRoute.OwnerCbPanel == "pnlJobDetail")
    {
        ConCompanyDropDownViewModel.EntityFor = M4PL.Entities.EntitiesAlias.JobDriverContactInfo;
        ConCompanyDropDownViewModel.SelectedId = _commonCommands.GetVendorIdforSiteCode(Model.Record.JobSiteCode, Model.Record.ParentId);

    }
    else
    {

    }
    var contactTypeReference = Model.ComboBoxProvider[Convert.ToInt32(LookupEnums.ContactType)];
    if (Model.CallBackRoute != null)
    {
        switch (Model.CallBackRoute.ParentEntity)
        {
            case M4PL.Entities.EntitiesAlias.Customer:
            case M4PL.Entities.EntitiesAlias.CustContact:
                ConCompanyDropDownViewModel.IsReadOnly = true;
                ConCompanyDropDownViewModel.ParentEntity = EntitiesAlias.Customer;
                if (contactTypeReference != null)
                {
                    Model.ComboBoxProvider[Convert.ToInt32(LookupEnums.ContactType)] = contactTypeReference.Where(x => x.SysRefName == ContactType.Customer.ToString() || x.SysRefName == ContactType.Driver.ToString()).ToList();
                    Model.Record.ConTypeId = Model.Record.Id == 0 ? contactTypeReference.FirstOrDefault(x => x.SysRefName == ContactType.Customer.ToString()).SysRefId : Model.Record.ConTypeId;
                }

                break;

            case M4PL.Entities.EntitiesAlias.CustDcLocation:
                ConCompanyDropDownViewModel.IsReadOnly = true;
                if (contactTypeReference != null)
                {
                    Model.ComboBoxProvider[Convert.ToInt32(LookupEnums.ContactType)] = contactTypeReference.Where(x => x.SysRefName == ContactType.Customer.ToString() || x.SysRefName == ContactType.Driver.ToString()).ToList();
                    Model.Record.ConTypeId = Model.Record.Id == 0 ? contactTypeReference.FirstOrDefault(x => x.SysRefName == ContactType.Driver.ToString()).SysRefId : Model.Record.ConTypeId;
                }
                break;



            case M4PL.Entities.EntitiesAlias.VendDcLocation:
                ConCompanyDropDownViewModel.IsReadOnly = true;
                if (contactTypeReference != null)
                {
                    Model.ComboBoxProvider[Convert.ToInt32(LookupEnums.ContactType)] = contactTypeReference.Where(x => x.SysRefName == ContactType.Vendor.ToString() || x.SysRefName == ContactType.Driver.ToString()).ToList();
                    Model.Record.ConTypeId = Model.Record.Id == 0 ? contactTypeReference.FirstOrDefault(x => x.SysRefName == ContactType.Vendor.ToString()).SysRefId : Model.Record.ConTypeId;
                }
                break;

            case M4PL.Entities.EntitiesAlias.Job:
                ConCompanyDropDownViewModel.IsReadOnly = true;
                if (contactTypeReference != null)
                {
                    Model.ComboBoxProvider[Convert.ToInt32(LookupEnums.ContactType)] = contactTypeReference.Where(x => x.SysRefName == ContactType.Vendor.ToString() || x.SysRefName == ContactType.Driver.ToString()).ToList();
                    Model.Record.ConTypeId = Model.Record.Id == 0 ? contactTypeReference.FirstOrDefault(x => x.SysRefName == ContactType.Driver.ToString()).SysRefId : Model.Record.ConTypeId;
                }
                break;


            case M4PL.Entities.EntitiesAlias.CustDcLocationContact:
                ConCompanyDropDownViewModel.IsReadOnly = true;
                ConCompanyDropDownViewModel.ParentEntity = EntitiesAlias.CustDcLocationContact;
                if (contactTypeReference != null)
                {
                    Model.ComboBoxProvider[Convert.ToInt32(LookupEnums.ContactType)] = contactTypeReference.Where(x => x.SysRefName == ContactType.Customer.ToString() || x.SysRefName == ContactType.Driver.ToString()).ToList();
                    Model.Record.ConTypeId = Model.Record.Id == 0 ? contactTypeReference.FirstOrDefault(x => x.SysRefName == ContactType.Driver.ToString()).SysRefId : Model.Record.ConTypeId;
                }

                break;
            case M4PL.Entities.EntitiesAlias.Vendor:
            case M4PL.Entities.EntitiesAlias.VendContact:
                ConCompanyDropDownViewModel.IsReadOnly = true;
                ConCompanyDropDownViewModel.ParentEntity = EntitiesAlias.Vendor;
                if (contactTypeReference != null)
                {
                    Model.ComboBoxProvider[Convert.ToInt32(LookupEnums.ContactType)] = contactTypeReference.Where(x => x.SysRefName == ContactType.Vendor.ToString() || x.SysRefName == ContactType.Driver.ToString()).ToList();
                    Model.Record.ConTypeId = Model.Record.Id == 0 ? contactTypeReference.FirstOrDefault(x => x.SysRefName == ContactType.Vendor.ToString()).SysRefId : Model.Record.ConTypeId;
                }
                break;
            case M4PL.Entities.EntitiesAlias.VendDcLocationContact:
            case M4PL.Entities.EntitiesAlias.PrgVendLocation:
                ConCompanyDropDownViewModel.IsReadOnly = true;
                ConCompanyDropDownViewModel.ParentEntity = EntitiesAlias.VendDcLocationContact;
                if (contactTypeReference != null)
                {
                    Model.ComboBoxProvider[Convert.ToInt32(LookupEnums.ContactType)] = contactTypeReference.Where(x => x.SysRefName == ContactType.Vendor.ToString() || x.SysRefName == ContactType.Driver.ToString()).ToList();
                    Model.Record.ConTypeId = Model.Record.Id == 0 ? contactTypeReference.FirstOrDefault(x => x.SysRefName == ContactType.Driver.ToString()).SysRefId : Model.Record.ConTypeId;
                }
                break;
            case M4PL.Entities.EntitiesAlias.Organization:
            case M4PL.Entities.EntitiesAlias.OrgPocContact:
                ConCompanyDropDownViewModel.IsReadOnly = true;
                ConCompanyDropDownViewModel.ParentEntity = EntitiesAlias.Organization;
                if (contactTypeReference != null)
                {
                    ////need to update agent to contract.
                    Model.ComboBoxProvider[Convert.ToInt32(LookupEnums.ContactType)] = contactTypeReference.Where(x => x.SysRefName == ContactType.Employee.ToString() || x.SysRefName == ContactType.Agent.ToString() || x.SysRefName == ContactType.Consultant.ToString()).ToList();
                    Model.Record.ConTypeId = Model.Record.Id == 0 ? contactTypeReference.FirstOrDefault(x => x.SysRefName == ContactType.Employee.ToString()).SysRefId : Model.Record.ConTypeId;
                }
                break;
            case M4PL.Entities.EntitiesAlias.PrgRole:
                ConCompanyDropDownViewModel.IsRequired = true;
                //businessStateDropDownViewModel.IsReadOnly = true;
                //Model.Permission = Permission.ReadOnly;
                break;
            default:
                ConCompanyDropDownViewModel.IsReadOnly = false;
                break;
        }
    }
}

@using (Html.BeginForm(MvcConstants.ActionAddOrEdit, EntitiesAlias.Contact.ToString(), FormMethod.Post, new { id = Model.FormId, @class = "contact-form" }))
{

    <div class="contact-card-partial">
        <div class="col-lg-12 col-md-12 no-padding">
            <div class="col-lg-2 col-md-2 col-sm-2 form-row-group no-padding col-fixed-10">
                @Html.Hidden("JobSiteCode_popupContact", Model.Record.JobSiteCode)
                @Html.Hidden("JobId_popupContact", Model.Record.JobId)
                @Html.Hidden("ParentId_popupContact", Model.Record.ParentId)
                @if (ViewData["ParentEntity"] != null) {
                    @Html.Hidden("ParentEntity", ViewData["ParentEntity"]);
                }
                @Html.EditorFor(m => m.Record.Id, new { NameSuffix = Model.ControlNameSuffix })
            </div>
            <div class="col-lg-2 col-md-2 col-sm-2 col-fixed-5 no-padding form-row-group">
                @Html.EditorFor(m => m.Record.ConTitleId, new { ConTitleId = Model.Record.ConTitleId, NameSuffix = Model.ControlNameSuffix, NullConTitle = Model.Record.Id })
            </div>
            <div class="col-lg-2 col-md-2 col-sm-2 form-row-group no-padding col-fixed-25">
                @Html.EditorFor(m => m.Record.ConFirstName, new { NameSuffix = Model.ControlNameSuffix })
            </div>
            <div class="col-lg-2 col-md-2 col-sm-2 form-row-group no-padding col-fixed-25">
                @Html.EditorFor(m => m.Record.ConMiddleName, new { NameSuffix = Model.ControlNameSuffix })
            </div>
            <div class="col-lg-2 col-md-2 col-sm-2 form-row-group no-padding col-fixed-25 remove-margin-right">
                @Html.EditorFor(m => m.Record.ConLastName, new { NameSuffix = Model.ControlNameSuffix })
            </div>
        </div>

        <div class="col-lg-12 col-md-12 no-padding">
            <div class="col-lg-5 col-md-5 col-sm-5 no-padding contact-card-jobtitle form-row-group">
                @Html.EditorFor(m => m.Record.ConJobTitle, new { NameSuffix = Model.ControlNameSuffix })
            </div>
            @if (Model.SessionProvider != null && Model.SessionProvider.ActiveUser != null)
            {
                <div class="col-lg-5 col-md-5 col-sm-5 no-padding contact-card-company form-row-group remove-margin-right">
                    @Html.Action(MvcConstants.ActionCompanyComboBox, M4PL.Entities.EntitiesAlias.Common.ToString(), new { Area = string.Empty, strDropDownViewModel = Newtonsoft.Json.JsonConvert.SerializeObject(ConCompanyDropDownViewModel) })
                    @*@Html.EditorFor(m => m.SessionProvider.ActiveUser.OrganizationName, new { NameSuffix = Model.ControlNameSuffix, Readonly = true, AssociatedColumnName = "ConOrgId" })*@
                </div>
            }
        </div>

        <div class="col-lg-12 col-md-12 no-padding">
            <div class="col-lg-4 col-md-4 col-sm-4 business-phone no-padding form-row-group">
                @Html.EditorFor(m => m.Record.ConBusinessPhone, new { NameSuffix = Model.ControlNameSuffix, MakeSkypeCall = true })
            </div>
            <div class="col-lg-2 col-md-2 col-sm-2 col-fixed-18 no-padding form-row-group">
                @Html.EditorFor(m => m.Record.ConBusinessPhoneExt, new { NameSuffix = Model.ControlNameSuffix })
            </div>
            <div class="col-lg-4 col-md-4 col-sm-4 mobile-phone no-padding form-row-group">
                @Html.EditorFor(m => m.Record.ConMobilePhone, new { NameSuffix = Model.ControlNameSuffix, MakeSkypeCall = true })
            </div>
            <div class="col-lg-2 col-md-2 col-sm-2 col-fixed-18 no-padding form-row-group remove-margin-right">
                @Html.EditorFor(m => m.Record.ConTypeId, new { ConTypeId = Model.Record.ConTypeId })
            </div>
        </div>
        <div class="col-lg-12 col-md-12 no-padding">
            <div class="col-lg-6 col-md-6 col-sm-6 contact-card-jobtitle no-padding form-row-group">
                @Html.EditorFor(m => m.Record.ConEmailAddress, new { NameSuffix = Model.ControlNameSuffix })
            </div>
            <div class="col-lg-6 col-md-6 col-sm-6 contact-card-company no-padding form-row-group remove-margin-right">
                @Html.EditorFor(m => m.Record.ConEmailAddress2, new { NameSuffix = Model.ControlNameSuffix })
            </div>
        </div>

        <div class="col-lg-12 col-md-12 no-padding">
            <div class="col-lg-11 col-md-11 col-sm-11 col-fixed-addr no-padding form-row-group remove-margin-right">
                @Html.EditorFor(m => m.Record.ConBusinessAddress1, new { NameSuffix = Model.ControlNameSuffix })
            </div>
        </div>

        <div class="col-lg-12 col-md-12 no-padding">
            <div class="col-lg-11 col-md-11 col-sm-11 col-fixed-addr no-padding form-row-group remove-margin-right">
                @Html.EditorFor(m => m.Record.ConBusinessAddress2, new { NameSuffix = Model.ControlNameSuffix })
            </div>
        </div>

        <div class="col-lg-12 col-md-12 no-padding">
            <div class="col-lg-6 col-md-6 col-sm-6 contact-card-jobtitle no-padding form-row-group">
                @Html.EditorFor(m => m.Record.ConBusinessCity, new { NameSuffix = Model.ControlNameSuffix })
            </div>
            <div class="col-lg-6 col-md-6 col-sm-6 contact-card-company no-padding form-row-group remove-margin-right">
                @Html.EditorFor(m => m.Record.ConBusinessZipPostal, new { NameSuffix = Model.ControlNameSuffix })
            </div>
        </div>

        <div class="col-lg-12 col-md-12 no-padding">
            <div class="col-lg-6 col-md-6 col-sm-6 contact-card-jobtitle no-padding form-row-group">
                @Html.Action(MvcConstants.ActionIntDropDownViewTemplate, EntitiesAlias.Common.ToString(), new { Area = string.Empty, strDropDownViewModel = Newtonsoft.Json.JsonConvert.SerializeObject(businessStateDropDownViewModel) })
            </div>
            <div class="col-lg-6 col-md-6 col-sm-6 contact-card-company no-padding form-row-group remove-margin-right">
                @Html.EditorFor(m => m.Record.ConBusinessCountryId, new { ConBusinessCountryId = Model.Record.ConBusinessCountryId, NameSuffix = Model.ControlNameSuffix })
            </div>
        </div>
    </div>

}