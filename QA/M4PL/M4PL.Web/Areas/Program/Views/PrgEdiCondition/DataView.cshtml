@*Copyright (2019) Meridian Worldwide Transportation Group

    //====================================================================================================================================================
    //Program Title:                                Meridian 4th Party Logistics(M4PL)
    //Programmer:                                   Nikhil Chauhan
    //Date Programmed:                              20/08/2019
    //Program Name:                                 PrgEdiCondition
    //Purpose:                                      Provides grid view for Program's Edi Condition
    //====================================================================================================================================================*@

@using M4PL.Entities
@using M4PL.Web.Models;
@using M4PL.Web.Providers;
@using M4PL.APIClient.ViewModels.Program;
@using M4PL.Utilities;
@using M4PL.Entities.Support;
@model GridResult<PrgEdiConditionView>
@{
    ViewBag.Title = Model.PageName;
}

@Html.DevExpress().GridView(settings =>
{
    settings.Name = Model.GridSetting.GridName;
    settings.KeyFieldName = Model.GridViewModel.KeyFieldName;
    settings.Styles.Header.Wrap = DefaultBoolean.True;
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Visible;
    settings.Settings.VerticalScrollBarMode = ScrollBarMode.Visible;
    settings.Settings.VerticalScrollableHeight = 300;
    settings.Settings.ShowFilterRow = Model.GridSetting.ShowFilterRow;
    settings.Settings.ShowFilterRowMenu = Model.GridSetting.ShowFilterRow;
    settings.Settings.ShowFilterBar = GridViewStatusBarMode.Auto;
    settings.SettingsBehavior.AllowFocusedRow = true;
    settings.SettingsBehavior.AllowEllipsisInText = true;
    settings.SettingsBehavior.AllowDragDrop = false;
    settings.SettingsCookies.CookiesID = Model.GridSetting.CallBackRoute.Controller;
    settings.SettingsCookies.Enabled = true;
    settings.SettingsCookies.StoreColumnsWidth = true;
    settings.SettingsCookies.StorePaging = false;
    settings.SettingsCookies.StoreGroupingAndSorting = false;
    settings.ControlStyle.Paddings.Padding = System.Web.UI.WebControls.Unit.Pixel(0);
    settings.ControlStyle.Border.BorderWidth = System.Web.UI.WebControls.Unit.Pixel(1);

    if (Model.GridSetting.CallBackRoute.ParentRecordId == 0 && Model.GridSetting.CallBackRoute.ParentEntity == EntitiesAlias.Common)
    {
        settings.Toolbars.Add(toolbar =>
        {
            toolbar.Name = Model.GridSetting.GridName + WebApplicationConstants.GridViewBannerSuffix;
            toolbar.Enabled = true;
            toolbar.Position = GridToolbarPosition.Top;
            toolbar.ItemAlign = GridToolbarItemAlign.Left;
            toolbar.Items.Add(i =>
            {
                i.Text = Model.PageName;
                i.ItemStyle.CssClass = "noHover";
                i.Image.Url = WebExtension.ConvertByteToString(Model.Icon);
            });
        });
    }

    settings.CallbackRouteValues = new { Action = Model.GridSetting.CallBackRoute.Action, Controller = Model.GridSetting.CallBackRoute.Controller, Area = Model.GridSetting.CallBackRoute.Area, strRoute = Newtonsoft.Json.JsonConvert.SerializeObject(Model.GridSetting.CallBackRoute) };
    //settings.CustomBindingRouteValuesCollection.Add(GridViewOperationType.Paging, new { Action = Model.GridSetting.PagingCallBackRoute.Action, Controller = Model.GridSetting.PagingCallBackRoute.Controller, Area = Model.GridSetting.PagingCallBackRoute.Area, strRoute = Newtonsoft.Json.JsonConvert.SerializeObject(Model.GridSetting.PagingCallBackRoute), gridName = Model.GridSetting.GridName });
    //settings.CustomBindingRouteValuesCollection.Add(GridViewOperationType.Filtering, new { Action = Model.GridSetting.FilteringCallBackRoute.Action, Controller = Model.GridSetting.FilteringCallBackRoute.Controller, Area = Model.GridSetting.FilteringCallBackRoute.Area, strRoute = Newtonsoft.Json.JsonConvert.SerializeObject(Model.GridSetting.FilteringCallBackRoute), gridName = Model.GridSetting.GridName });
    //settings.CustomBindingRouteValuesCollection.Add(GridViewOperationType.Sorting, new { Action = Model.GridSetting.SortingCallBackRoute.Action, Controller = Model.GridSetting.SortingCallBackRoute.Controller, Area = Model.GridSetting.SortingCallBackRoute.Area, strRoute = Newtonsoft.Json.JsonConvert.SerializeObject(Model.GridSetting.SortingCallBackRoute), gridName = Model.GridSetting.GridName });

    settings.SettingsResizing.ColumnResizeMode = ColumnResizeMode.Control;
    settings.ClientSideEvents.ColumnResized = "M4PLWindow.DataView.OnColumnChanged";
    settings.SettingsResizing.Visualization = ResizingMode.Live;

    settings.SettingsPager.EnableAdaptivity = true;
    settings.SettingsPager.PageSize = Model.GridSetting.PageSize;
    settings.SettingsPager.Position = System.Web.UI.WebControls.PagerPosition.TopAndBottom;
    settings.SettingsPager.FirstPageButton.Visible = true;
    settings.SettingsPager.LastPageButton.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Items = Model.GridSetting.AvailablePageSizes;

    settings.SettingsEditing.Mode = Model.GridSetting.Mode;
    settings.Columns.Clear();

    if (settings.SettingsEditing.Mode == GridViewEditingMode.Batch)
    {
        settings.SettingsEditing.BatchUpdateRouteValues = new { Action = Model.GridSetting.BatchUpdateCallBackRoute.Action, Controller = Model.GridSetting.BatchUpdateCallBackRoute.Controller, Area = Model.GridSetting.BatchUpdateCallBackRoute.Area, strRoute = Newtonsoft.Json.JsonConvert.SerializeObject(Model.GridSetting.BatchUpdateCallBackRoute), gridName = Model.GridSetting.GridName };
        settings.SettingsEditing.BatchEditSettings.EditMode = GridViewBatchEditMode.Row;
        settings.SettingsEditing.BatchEditSettings.StartEditAction = GridViewBatchStartEditAction.DblClick;
        settings.SettingsEditing.BatchEditSettings.HighlightDeletedRows = true;
        settings.SettingsEditing.BatchEditSettings.ShowConfirmOnLosingChanges = false;
        settings.SettingsEditing.BatchEditSettings.KeepChangesOnCallbacks = DefaultBoolean.False;
        settings.ClientSideEvents.BatchEditEndEditing = "M4PLWindow.DataView.OnBatchEditEndEditing";
        settings.ClientSideEvents.BatchEditStartEditing = string.Format("function(s, e){{ M4PLWindow.DataView.OnBatchEditStartEditing(s, e, '{0}'); }}", Model.Permission <= Permission.ReadOnly);
    }
    if (Model.Permission == Permission.All)
    {
        settings.CommandColumn.Visible = true;
        GridViewCommandColumnCustomButton customButton = new GridViewCommandColumnCustomButton();
        customButton.Text = Model.Operations[OperationTypeEnum.Delete].LangName;
        customButton.ID = "deleteButton";
        settings.CommandColumn.CustomButtons.Add(customButton);
        settings.CommandColumn.FixedStyle = GridViewColumnFixedStyle.Left;
        settings.CommandColumn.Width = System.Web.UI.WebControls.Unit.Pixel(65);
        settings.CommandColumn.AllowDragDrop = DefaultBoolean.False;
        settings.CommandColumn.ShowNewButtonInHeader = Model.GridSetting.ShowNewButton;
    }

    var savedGridLayoutFromCache = WebUtilities.GetOrSetGridLayout(Model.GridSetting.CallBackRoute.Entity.ToString(), string.Empty);

    foreach (var col in Model.ColumnSettings)
    {
        if (col.ColIsVisible && col.GlobalIsVisible && !col.ColColumnName.Equals(settings.KeyFieldName, StringComparison.OrdinalIgnoreCase)
        && !col.DataType.Equals(SQLDataTypes.image.ToString(), StringComparison.OrdinalIgnoreCase)
        && !col.DataType.Equals(SQLDataTypes.varbinary.ToString(), StringComparison.OrdinalIgnoreCase) )
        {
            settings.Columns.Add(column =>
            {
                column.FieldName = col.ColColumnName;
                column.Caption = col.ColAliasName;
                column.ToolTip = col.ColCaption;
                column.ReadOnly = col.ColIsReadOnly;
                column.Visible = col.ColIsVisible;
                column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
                if (string.IsNullOrWhiteSpace(savedGridLayoutFromCache))
                    column.Width = System.Web.UI.WebControls.Unit.Pixel(WebUtilities.GetPixel(col));
                column.FixedStyle = (col.ColIsFreezed) ? GridViewColumnFixedStyle.Left : GridViewColumnFixedStyle.None;

                if (col.ColColumnName.EndsWith(WebApplicationConstants.ItemNumber) || col.ColColumnName.EndsWith(WebApplicationConstants.SortOrder) || col.ColColumnName.EndsWith(WebApplicationConstants.LineOrder))
                    column.ReadOnly = true;

                if (col.DataType.Equals(SQLDataTypes.Char.ToString(), StringComparison.OrdinalIgnoreCase) || col.DataType.Equals(SQLDataTypes.nvarchar.ToString(), StringComparison.OrdinalIgnoreCase)
                  || col.DataType.Equals(SQLDataTypes.varchar.ToString(), StringComparison.OrdinalIgnoreCase) || col.DataType.Equals(SQLDataTypes.Name.ToString(), StringComparison.OrdinalIgnoreCase))
                {
                    if ((col.ColColumnName.Equals(WebApplicationConstants.EdiJobFieldName, StringComparison.OrdinalIgnoreCase)) || (col.ColColumnName.Equals(WebApplicationConstants.EdiJob2FieldName, StringComparison.OrdinalIgnoreCase)))
                    {
                        column.EditorProperties().ComboBox(cs =>
                        {
                            cs.ClientInstanceName = col.ColColumnName;
                            cs.TextField = "ColAliasName";
                            cs.ValueField = "ColColumnName";
                            cs.ValueType = typeof(string);
                            cs.DataSource = (ViewData[WebApplicationConstants.CommonCommand] as M4PL.APIClient.Common.ICommonCommands).GetColumnSettings(EntitiesAlias.EDISummaryHeader)
                             .Where(x => FormViewProvider.ComboBoxSelectedFields[EntitiesAlias.EDISummaryHeader].Contains(x.ColColumnName));
                            if (col.ColIsReadOnly)
                            {
                                cs.Style.CssClass = CssConstants.ReadOnlyBackgroundColor;
                            }

                            cs.Columns.Add("ColAliasName", "ColAliasName", 130);
                            cs.Columns.Add("ColColumnName", "ColColumnName", 130);
                        });
                    }

                    else if (col.ColColumnName.Equals(WebApplicationConstants.EdiJob2FieldName, StringComparison.OrdinalIgnoreCase))
                    {

                        column.EditorProperties().ComboBox(cs =>
                        {
                            cs.ClientInstanceName = col.ColColumnName;
                            cs.TextField = "ColAliasName";
                            cs.ValueField = "ColColumnName";
                            cs.ValueType = typeof(string);
                            cs.DataSource = (ViewData[WebApplicationConstants.CommonCommand] as M4PL.APIClient.Common.ICommonCommands).GetColumnSettings(EntitiesAlias.EDISummaryHeader)
                            .Where(x => FormViewProvider.ComboBoxSelectedFields[EntitiesAlias.EDISummaryHeader].Contains(x.ColColumnName));
                            if (col.ColIsReadOnly)
                            {
                                cs.Style.CssClass = CssConstants.ReadOnlyBackgroundColor;
                            }

                            cs.Columns.Add("ColAliasName", "ColAliasName", 130);
                            cs.Columns.Add("ColColumnName", "ColColumnName", 130);
                        });
                    }

                    else if (col.ColIsVisible && col.DataType.Equals(SQLDataTypes.Name.ToString(), StringComparison.OrdinalIgnoreCase))
                    {
                        ViewData["ProgramCodes"] = (ViewData[WebApplicationConstants.CommonCommand] as M4PL.APIClient.Common.ICommonCommands).GetProgramDescendants(new DropDownInfo { RecordId = Model.GridSetting.CallBackRoute.Filters.Value.ToLong(), Entity = EntitiesAlias.Program });
                        if (ViewData["ProgramCodes"] != null && ViewData["ProgramCodes"] is IList<M4PL.APIClient.ViewModels.Program.ProgramView>)
                        {
                            var idRefLangNames = ViewData["ProgramCodes"] as IList<M4PL.APIClient.ViewModels.Program.ProgramView>;
                            column.EditorProperties().ComboBox(cs =>
                            {
                                cs.ClientInstanceName = col.ColColumnName;
                                cs.TextField = "PrgProgramCode";
                                cs.ValueField = "Id";
                                cs.ValueType = typeof(long);
                                cs.DataSource = idRefLangNames;
                                if (col.ColIsReadOnly)
                                {
                                    cs.Style.CssClass = CssConstants.ReadOnlyBackgroundColor;
                                }
                            });
                        }
                    }
                    else if (ViewData[WebApplicationConstants.CommonCommand] != null && col.ColLookupId > 0 && ViewData[WebApplicationConstants.CommonCommand] is M4PL.APIClient.Common.ICommonCommands && col.ColColumnName != SysRefTabPageNameColumns.TabTableName.ToString())
                    {
                        column.SetFilterTemplateContent(lookup =>
                        {
                            var allIdRefLangNames = (IList<M4PL.Entities.Support.IdRefLangName>)(ViewData[WebApplicationConstants.CommonCommand] as M4PL.APIClient.Common.ICommonCommands).GetIdRefLangNames(col.ColLookupId);
                            if (col.ColLookupId == LookupEnums.Status.ToInt())
                            {
                                var allStatuses = WebExtension.GetSystemSettingValue(Model.SessionProvider.UserSettings.Settings, WebApplicationConstants.SysStatusesIn);
                                if (!string.IsNullOrWhiteSpace(allStatuses))
                                {
                                    var allStatus = Enumerable.ToList(Extension.SplitComma(allStatuses));
                                    allIdRefLangNames = allIdRefLangNames.Where(x => allStatus.Contains(x.SysRefId.ToString())).ToList();
                                }
                            }
                            var allFilters = (Dictionary<string, string>)ViewData[MvcConstants.Filters];
                            string relatedValue = null;
                            allFilters.TryGetValue(column.FieldName, out relatedValue);
                            ViewContext.Writer.Write(Html.DevExpress().ComboBox(cs =>
                            {
                                cs.Name = "Filter" + Model.GridSetting.CallBackRoute.Controller + col.ColColumnName;
                                cs.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                                cs.Properties.ClientInstanceName = col.ColColumnName;
                                cs.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.Always;
                                cs.Properties.TextField = "LangName";
                                cs.Properties.ValueField = col.DataType.Equals(SQLDataTypes.nvarchar.ToString(), StringComparison.OrdinalIgnoreCase) ? "LangName" : "SysRefId";
                                cs.Properties.ValueType = col.DataType.Equals(SQLDataTypes.nvarchar.ToString(), StringComparison.OrdinalIgnoreCase) ? typeof(string) : typeof(int);
                                cs.Properties.ClientSideEvents.SelectedIndexChanged = string.Format("function(s, e) {{M4PLWindow.DataView.OnComboBoxValueChanged(s, e, {0}, '{1}'); }}", Model.GridSetting.GridName, column.FieldName);
                                cs.PreRender = (sender, e) =>
                                {
                                    if (!string.IsNullOrWhiteSpace(relatedValue))
                                    {
                                        MVCxComboBox cmb = sender as MVCxComboBox;
                                        if (col.DataType.Equals(SQLDataTypes.nvarchar.ToString(), StringComparison.OrdinalIgnoreCase))
                                        {
                                            cmb.Value = Convert.ToString(relatedValue);
                                        }
                                        else
                                        {
                                            cmb.Value = Convert.ToInt32(relatedValue);
                                        }
                                    }
                                };
                                if (col.ColIsReadOnly)
                                {
                                    cs.ControlStyle.CssClass = CssConstants.ReadOnlyBackgroundColor;
                                }
                            }).BindList(allIdRefLangNames).GetHtml().ToHtmlString());
                        });

                        column.EditorProperties().ComboBox(cs =>
                        {
                            cs.ClientInstanceName = col.ColColumnName;
                            cs.TextField = "LangName";
                            cs.ValueField = col.DataType.Equals(SQLDataTypes.nvarchar.ToString(), StringComparison.OrdinalIgnoreCase) ? "LangName" : "SysRefId";
                            cs.ValueType = col.DataType.Equals(SQLDataTypes.nvarchar.ToString(), StringComparison.OrdinalIgnoreCase) ? typeof(string) : typeof(int);
                            cs.DataSource = (ViewData[WebApplicationConstants.CommonCommand] as M4PL.APIClient.Common.ICommonCommands).GetIdRefLangNames(col.ColLookupId);
                            if (col.ColIsReadOnly)
                            {
                                cs.Style.CssClass = CssConstants.ReadOnlyBackgroundColor;
                            }
                            // Read only RefTableName and TabTableName dropdown column in ref tab grid
                            if (col.ColColumnName == SysRefTabPageNameColumns.RefTableName.ToString())
                            {
                                column.ReadOnly = true;
                                column.CellStyle.CssClass = CssConstants.ReadOnlyBackgroundColor;
                                cs.DropDownButton.Visible = false;
                                cs.DropDownHeight = 0;
                            }
                        });
                    }

                    else
                    {
                        column.EditorProperties().TextBox(txtBox =>
                        {
                            txtBox.MaxLength = col.MaxLength;
                            if (column.ReadOnly)
                                column.CellStyle.CssClass = "readonlyBgColor";
                        });
                    }
                }

            });
        }
    }

    settings.ClientLayout = (sender, e) =>
    {
        if (e.LayoutMode == ClientLayoutMode.Saving)
            WebUtilities.GetOrSetGridLayout(Model.GridSetting.CallBackRoute.Entity.ToString(), e.LayoutData);
        else
        {
            var layout = WebUtilities.GetOrSetGridLayout(Model.GridSetting.CallBackRoute.Entity.ToString(), string.Empty);
        }
    };

    settings.FilterControlOperationVisibility = (sender, e) =>
    {
        WebUtilities.ChangeFilterControlOperationVisibility((MVCxGridViewColumn)((MVCxGridView)sender).Columns[e.PropertyInfo.PropertyName], e);
    };

    settings.SettingsContextMenu.Enabled = true;
    settings.ClientSideEvents.ContextMenuItemClick = "function(s, e){ M4PLWindow.DataView.OnContextMenu(s, e, '" + WebExtension.ConvertByteToString(Model.Icon) + "', '" + MvcConstants.ActionChooseColumn + "', '" + MvcConstants.ActionCopyRecord + "'); }";
    settings.ClientSideEvents.ContextMenu = "function(s, e){ M4PLWindow.DataView.ContextMenu(s, e, " + Model.GridSetting.GridName + ", '" + "False" + "'); }";
    settings.FillContextMenuItems = (sender, e) =>
    {
        e.Items.Clear();
        if (e.MenuType == GridViewContextMenuType.Rows)
        {
            foreach (var contexMenu in Model.GridSetting.ContextMenu)
            {
                var command = e.CreateItem(contexMenu.LangName, Newtonsoft.Json.JsonConvert.SerializeObject(contexMenu.Route));
                command.Image.Url = WebExtension.ConvertByteToString(contexMenu.Icon);
                command.Enabled = true;
                e.Items.Add(command);
            }
        }
    };

    settings.Init += (s, e) =>
    {
        var grid = (MVCxGridView)s;
        grid.ForceDataRowType(Model.GridSetting.DataRowType);
    };

    settings.Styles.StatusBar.CssClass = "StatusBarWithButtons";
    settings.SetStatusBarTemplateContent(c =>
    {
        var saveRoute = (M4PL.Entities.Support.MvcRoute)Model.GridSetting.CallBackRoute;//conversion needed as dyamic has no applicable extension method.
        saveRoute.Url = Url.Action(MvcConstants.ActionCheckRecordUsed, Model.GridSetting.CallBackRoute.Controller, new { Area = Model.GridSetting.CallBackRoute.Area, strRoute = Newtonsoft.Json.JsonConvert.SerializeObject(saveRoute) });
        Html.DevExpress().Button(btnSaveSettings =>
        {
            btnSaveSettings.Name = "btnSave" + Model.GridSetting.GridName;//The name standard dependent on Ribbon's 'Save' functionality.Please make changes BaseController 'Ribbon' region 'Save' action
            btnSaveSettings.EnableTheming = true;
            btnSaveSettings.Text = Model.Operations[OperationTypeEnum.SaveChanges].LangName;
            btnSaveSettings.ClientSideEvents.Click = "function(s, e){ M4PLWindow.DataView.OnUpdateEdit(" + Model.GridSetting.GridName + ", e, " + Newtonsoft.Json.JsonConvert.SerializeObject(saveRoute) + ");}";
            btnSaveSettings.AllowFocus = false;
            btnSaveSettings.ControlStyle.CssClass = "form-btn";
            if (Model.GridSetting.CallBackRoute.ParentRecordId == 0)
            {
                btnSaveSettings.ClientVisible = false;
            }

        }).Render();

        ViewContext.Writer.Write("&nbsp;&nbsp;&nbsp;");
        Html.DevExpress().Button(btnCancelSettings =>
        {
            btnCancelSettings.Name = "btnCancel" + Model.GridSetting.GridName;
            btnCancelSettings.EnableTheming = true;
            btnCancelSettings.Text = Model.Operations[OperationTypeEnum.CancelChanges].LangName;
            btnCancelSettings.ClientSideEvents.Click = "function(s, e){ M4PLWindow.DataView.OnCancelEdit(" + Model.GridSetting.GridName + ", e);}";
            btnCancelSettings.AllowFocus = false;
            if (Model.GridSetting.CallBackRoute.ParentRecordId == 0)

            {
                btnCancelSettings.ClientVisible = false;
            }
            btnCancelSettings.ControlStyle.CssClass = "form-btn";
        }).Render();
    });

    settings.ClientSideEvents.BeginCallback = "M4PLWindow.DataView.OnBeginCallback";

    settings.ClientSideEvents.Init = "function(s, e){ M4PLWindow.DataView.OnInit(s, e, null, '" + Convert.ToBoolean(ViewData[WebApplicationConstants.ClearFilterManually]) + "'); }";
    settings.ClientSideEvents.EndCallback = "M4PLWindow.DataView.OnEndCallback";
    settings.ClientSideEvents.CustomButtonClick = "M4PLWindow.DataView.OnCustomButtonClick";
    settings.ClientSideEvents.CallbackError = "M4PLCommon.Common.OnCallbackError";

    settings.CellEditorInitialize = (s, e) =>
    {
        ASPxEdit editor = (ASPxEdit)e.Editor;
        editor.ValidationSettings.Display = Display.None;
    };
    settings.CustomJSProperties = (s, e) =>
    {
        e.Properties["cpBatchEditDisplayRoute"] = ViewData[WebApplicationConstants.GridBatchEditDisplayMessage];
    };

    settings.CustomColumnDisplayText = (s, e) =>
    {
        if (e.Column.FieldName == WebApplicationConstants.EdiJobFieldName || e.Column.FieldName == WebApplicationConstants.EdiMapM4PLFieldName)
        {
            var data = (s as MVCxGridView).GetRowValues(e.VisibleIndex, string.Concat(e.Column.FieldName + "Name"));
            if (data != null)
                e.DisplayText = data.ToString();
        }
    };

    settings.PreRender = (s, e) =>
    {
        var grid = (MVCxGridView)s;
        if (Model.GridSetting.ChildGridRoute != null && Model.GridSetting.ChildGridRoute.Entity != Model.GridSetting.CallBackRoute.Entity && Model.GridSetting.ChildGridRoute.ParentRecordId > 0)
        {
            grid.DetailRows.ExpandRowByKey(Model.GridSetting.ChildGridRoute.ParentRecordId);
        }
        if (Model.FocusedRowId > 0)
            grid.FocusedRowIndex = grid.FindVisibleIndexByKeyValue(Model.FocusedRowId);
    };

}).Bind(null).BindToCustomData(Model.GridViewModel).GetHtml()