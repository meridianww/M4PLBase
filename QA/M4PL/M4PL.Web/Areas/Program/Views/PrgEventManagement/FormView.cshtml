@using M4PL.Entities
@using System.Web.UI.WebControls
@using M4PL.Web.Providers

@model  M4PL.Web.Models.FormResult<M4PL.APIClient.ViewModels.Program.PrgEventManagementView>
@{
    ViewBag.Title = Model.PageName;
    Model.Record.ArbRecordId = Model.Record.Id == 0 ? new Random().Next(-1000, 0) : Model.Record.Id;
    var programDropdown = Model.Record.ProgramID.GetValueOrDefault().GetJobProgramDropDown("ProgramID", Model, (Model.Record.ParentId > 0) ? Model.Record.ParentId : Model.SessionProvider.ActiveUser.OrganizationId, true);
    var eventTypeDropDownViewModel = Model.Record.EventType.GetValueOrDefault().GetEventTypeDropDown("EventType", Model.ColumnSettings.FirstOrDefault("EventType").ColAliasName, Model.ColumnSettings.FirstOrDefault("EventType").IsRequired, Model.IsPopUp, Model.Permission);
}

@if (!Model.IsPopUp && (Model.Record.Id > 0))
{
    @Html.Partial(MvcConstants.NavigationPanePartial, Model.NavigationPane);
}

@using (Html.BeginForm(MvcConstants.ActionAddOrEdit, Model.CallBackRoute.Controller, FormMethod.Post, new { id = Model.FormId, @class = "col-lg-12 col-md-12" }))
{
    @Html.DevExpress().RoundPanel(settings =>
{
    settings.Name = "pnlPrgCostRate";
    settings.Width = Unit.Percentage(100);
    settings.AllowCollapsingByHeaderClick = true;
    settings.ShowCollapseButton = true;
    settings.HeaderText = "Detail";
    settings.Collapsed = false;
    settings.ControlStyle.CssClass = "form-layout";
    settings.SetContent(() =>
    {
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.ArbRecordId, new { Name = "ArbRecordId" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.ParentId, new { Name = "ParentId" }).ToHtmlString());
        ViewContext.Writer.Write("<div class='col-lg-11 col-md-11 no-padding pricecode-grouping'>");
        ViewContext.Writer.Write("<div class='form-row-group prog-castrate-code'>" + Html.EditorFor(m => m.Record.Id).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group prog-castrate-code'>");
        ViewContext.Writer.Write(Html.Action(MvcConstants.ActionDropDownViewTemplate, M4PL.Entities.EntitiesAlias.Common.ToString(), new { Area = string.Empty, strDropDownViewModel = Newtonsoft.Json.JsonConvert.SerializeObject(programDropdown) }));
        ViewContext.Writer.Write("</div>");
        ViewContext.Writer.Write("<div class='form-row-group prog-castrate-code'>" + Html.EditorFor(m => m.Record.EventName).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group prog-castrate-code'>" + Html.Action(MvcConstants.ActionIntDropDownViewTemplate, EntitiesAlias.Common.ToString(), new { Area = string.Empty, strDropDownViewModel = Newtonsoft.Json.JsonConvert.SerializeObject(eventTypeDropDownViewModel) }) + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group prog-castrate-code'>" + Html.EditorFor(m => m.Record.EventShortName).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("</div>");
        ViewContext.Writer.Write("<div class='col-lg-11 col-md-11 no-padding pricecode-grouping'>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-10'>" + Html.EditorFor(m => m.Record.StatusId, new { StatusId = Model.Record.StatusId }).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-10'>" + Html.EditorFor(m => m.Record.IsBodyHtml).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-45'>" + Html.EditorFor(m => m.Record.FromMail).ToHtmlString() + "</div>");

        ViewContext.Writer.Write("</div>");

        ViewContext.Writer.Write("<div class='col-lg-11 col-md-11 no-padding pricecode-grouping'>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-75'>" + Html.EditorFor(m => m.Record.Description, "MultilineText").ToHtmlString() + "</div>");
        ViewContext.Writer.Write("</div>");

        ViewContext.Writer.Write("<div class='col-lg-11 col-md-11 no-padding pricecode-grouping'>");

        ViewContext.Writer.Write("<div class='form-row-group col-fixed-32'> " + Html.Action("ToEmailSubscriberType", M4PL.Entities.EntitiesAlias.PrgEventManagement.ToString()) + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-32'> " + Html.Action("CcEmailSubscriber", M4PL.Entities.EntitiesAlias.PrgEventManagement.ToString()) + "</div>");
        ViewContext.Writer.Write("</div>");

        ViewContext.Writer.Write("<div class='col-lg-11 col-md-11 no-padding pricecode-grouping'>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-32'>" + Html.EditorFor(m => m.Record.ToEmail, "MultilineText").ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-32'>" + Html.EditorFor(m => m.Record.CcEMail, "MultilineText").ToHtmlString() + "</div>");
        ViewContext.Writer.Write("</div>");
    });
}).GetHtml()
    @Html.Partial(MvcConstants.EnteredChangedPartial, new M4PL.Web.Models.FormResult<BaseModel> { Record = Model.Record, ColumnSettings = Model.ColumnSettings, FormId = Model.FormId, IsPopUp = Model.IsPopUp })
    if (!Model.IsPopUp)
    {
        <div class="form-btns-block">
            <div class="half-width">
                @Html.DevExpress().Button(settings =>
           {
               settings.Name = "btn" + Model.CallBackRoute.Controller + "Save";//The name standard dependent on Ribbon's 'Save' functionality.Please make changes BaseController 'Ribbon' region 'Save' action
               settings.EnableTheming = true;
               settings.Text = (Model.Record.Id > 0) ? Model.Operations[OperationTypeEnum.Update].LangName : Model.Operations[OperationTypeEnum.Save].LangName;
               settings.AllowFocus = false;
               settings.ControlStyle.CssClass = "form-btn pull-right";
               settings.Enabled = (Model.Record.Id > 0) ? !(Model.Permission < Permission.EditAll) : !(Model.Permission < Permission.AddEdit);
               settings.ClientSideEvents.Click = Model.SubmitClick;
               settings.Images.Image.Url = WebExtension.ConvertByteToString(Model.Operations[(Model.Record.Id > 0) ? OperationTypeEnum.Edit : OperationTypeEnum.New].Icon);
           }).GetHtml()
            </div>
            <div class="half-width">
                @Html.DevExpress().Button(settings =>
           {
               settings.Name = "btn" + Model.CallBackRoute.Controller + "Cancel";
               settings.EnableTheming = true;
               settings.Text = Model.Operations[OperationTypeEnum.Cancel].LangName;
               settings.AllowFocus = false;
               settings.ControlStyle.CssClass = "form-btn pull-left";
               settings.ClientSideEvents.Click = Model.CancelClick; settings.Images.Image.Url = WebExtension.ConvertByteToString(Model.Operations[OperationTypeEnum.Cancel].Icon);
           }).GetHtml()
            </div>
        </div>
    }
}
