@*Copyright (2016) Meridian Worldwide Transportation Group
    //All Rights Reserved Worldwide
    //====================================================================================================================================================
    //Program Title:                                Meridian 4th Party Logistics(M4PL)
    //Programmer:                                   Akhil
    //Date Programmed:                              13/10/2017
    //Program Name:                                 PrgBillableRateFormView
    //Purpose:                                      Provides view for Program's Billable rate
    //====================================================================================================================================================*@

@using M4PL.Entities
@using System.Web.UI.WebControls
@using M4PL.Web.Providers
@model  M4PL.Web.Models.FormResult<M4PL.APIClient.ViewModels.Program.ProgramBillableRateView>
@{
    ViewBag.Title = Model.PageName;
    var prgVendDropDownViewModel = Model.Record.PbrVendLocationID.GetValueOrDefault().GetPrgVendLocationDropDown("PbrVendLocationID", Model.ColumnSettings.FirstOrDefault("PbrVendLocationID").ColAliasName, Model.ColumnSettings.FirstOrDefault("PbrVendLocationID").IsRequired, Model.IsPopUp, Model.Permission, Model.Record.ParentId);
    Model.Record.ArbRecordId = Model.Record.Id == 0 ? new Random().Next(-1000, 0) : Model.Record.Id;
    if (Model.Record.RateTypeId != 109 && Model.ColumnSettings.FirstOrDefault("RateTypeId").ColLookupId == 34)
    {
        prgVendDropDownViewModel.ClientNotVisible = true;
    }
}

@if (!Model.IsPopUp && (Model.Record.Id > 0))
{
    @Html.Partial(MvcConstants.NavigationPanePartial, Model.NavigationPane);
}

@using (Html.BeginForm(MvcConstants.ActionAddOrEdit, Model.CallBackRoute.Controller, FormMethod.Post, new { id = Model.FormId, @class = "col-lg-12 col-md-12" }))
{
    @Html.DevExpress().RoundPanel(settings =>
{
    settings.Name = "pnlPrgBillableRate";
    settings.Width = Unit.Percentage(100);
    settings.AllowCollapsingByHeaderClick = true;
    settings.ShowCollapseButton = true;
    settings.HeaderText = "Detail";
    settings.Collapsed = false;
    settings.ControlStyle.CssClass = "form-layout";
    settings.SetContent(() =>
    {
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.ArbRecordId, new { Name = "ArbRecordId" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.ParentId, new { Name = "ParentId" }).ToHtmlString());
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-13'>" + Html.EditorFor(m => m.Record.Id).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='col-lg-11 col-md-11 no-padding pricecode-grouping'>");
        ViewContext.Writer.Write("<div class='form-row-group prog-castrate-code'>" + Html.EditorFor(m => m.Record.PbrCode).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group prog-castrate-code'>" + Html.EditorFor(m => m.Record.PbrCustomerCode).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-50'>" + Html.EditorFor(m => m.Record.PbrTitle).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-13'>" + Html.EditorFor(m => m.Record.PbrEffectiveDate).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-10'>" + Html.EditorFor(m => m.Record.RateCategoryTypeId, new { RateCategoryTypeId = Model.Record.RateCategoryTypeId }).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-13'>" + Html.EditorFor(m => m.Record.RateTypeId, new { RateTypeId = Model.Record.RateTypeId, OnChange = "function(s,e){DevExCtrl.ComboBox.ProgramBillOnSelectedIndexChanged(s,e,'" + Model.IsPopUp + "','PbrVendLocationID')}" }).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-13'>" + Html.EditorFor(m => m.Record.RateUnitTypeId, new { RateUnitTypeId = Model.Record.RateUnitTypeId }).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-13 iteminput-hide'>" + Html.EditorFor(m => m.Record.PbrBillablePrice).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group billable-formate'>" + Html.EditorFor(m => m.Record.PbrFormat).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-10'>" + Html.EditorFor(m => m.Record.StatusId, new { StatusId = Model.Record.StatusId }).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-13'>" + Html.EditorFor(m => m.Record.PbrElectronicBilling).ToHtmlString() + "</div>");

        ViewContext.Writer.Write("<div class='col-lg-12 col-md-12 expression-group no-padding'>");
        ViewContext.Writer.Write("<div class='col-lg-6 col-md-6 billable-rate no-padding'>");
        ViewContext.Writer.Write("<div class='form-row-group expression01-logic'>" + Html.EditorFor(m => m.Record.PbrExpression01).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group expression01-logic'>" + Html.EditorFor(m => m.Record.PbrExpression02).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group expression01-logic'>" + Html.EditorFor(m => m.Record.PbrExpression03).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group expression01-logic'>" + Html.EditorFor(m => m.Record.PbrExpression04).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group expression01-logic'>" + Html.EditorFor(m => m.Record.PbrExpression05).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("</div>");
        ViewContext.Writer.Write("<div class='col-lg-6 col-md-6 billable-rate no-padding'>");
        ViewContext.Writer.Write("<div class='form-row-group expression01-logic'>" + Html.EditorFor(m => m.Record.PbrLogic01).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group expression01-logic'>" + Html.EditorFor(m => m.Record.PbrLogic02).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group expression01-logic'>" + Html.EditorFor(m => m.Record.PbrLogic03).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group expression01-logic'>" + Html.EditorFor(m => m.Record.PbrLogic04).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group expression01-logic'>" + Html.EditorFor(m => m.Record.PbrLogic05).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("</div>");
        ViewContext.Writer.Write("</div>");
    });
}).GetHtml()

    @Html.DevExpress().RoundPanel(settings =>
{
    settings.Name = "pnlPbrDescription";
    settings.Width = Unit.Percentage(100);
    settings.AllowCollapsingByHeaderClick = true;
    settings.ShowCollapseButton = true;
    settings.HeaderText = "Description";
    settings.Collapsed = true;
    settings.ControlStyle.CssClass = "form-layout";
    settings.SetContent(() =>
    {
        Html.RenderAction(MvcConstants.ActionRichEditDescription, Model.CallBackRoute.Controller, new { Area = Model.CallBackRoute.Area, docId = new M4PL.Entities.Support.Filter { FieldName = "ArbRecordId", Value = Model.Record.ArbRecordId.ToString() }, viewRecord = Model.Record, isPopup = Model.IsPopUp });
    });
}).GetHtml()

    @Html.Partial(MvcConstants.EnteredChangedPartial, new M4PL.Web.Models.FormResult<BaseModel> { Record = Model.Record, ColumnSettings = Model.ColumnSettings, FormId = Model.FormId, IsPopUp = Model.IsPopUp  })
    if (!Model.IsPopUp)
    {
        <div class="form-btns-block">
            <div class="half-width">
                @Html.DevExpress().Button(settings =>
           {
               settings.Name = "btn" + Model.CallBackRoute.Controller + "Save";//The name standard dependent on Ribbon's 'Save' functionality.Please make changes BaseController 'Ribbon' region 'Save' action
               settings.EnableTheming = true;
               settings.Text = (Model.Record.Id > 0) ? Model.Operations[OperationTypeEnum.Update].LangName : Model.Operations[OperationTypeEnum.Save].LangName;
               settings.AllowFocus = false;
               settings.ControlStyle.CssClass = "form-btn pull-right";
               settings.Enabled = (Model.Record.Id > 0) ? !(Model.Permission < Permission.EditAll) : !(Model.Permission < Permission.AddEdit);
               settings.ClientSideEvents.Click = Model.SubmitClick;
               settings.Images.Image.Url = WebExtension.ConvertByteToString(Model.Operations[(Model.Record.Id > 0) ? OperationTypeEnum.Edit : OperationTypeEnum.New].Icon);
           }).GetHtml()
            </div>
            <div class="half-width">
                @Html.DevExpress().Button(settings =>
       {
           settings.Name = "btn" + Model.CallBackRoute.Controller + "Cancel";
           settings.EnableTheming = true;
           settings.Text = Model.Operations[OperationTypeEnum.Cancel].LangName;
           settings.AllowFocus = false;
           settings.ControlStyle.CssClass = "form-btn pull-left";
           settings.ClientSideEvents.Click = Model.CancelClick; settings.Images.Image.Url = WebExtension.ConvertByteToString(Model.Operations[OperationTypeEnum.Cancel].Icon);
       }).GetHtml()
            </div>
        </div>
    }
}