@*Copyright (2016) Meridian Worldwide Transportation Group
    //All Rights Reserved Worldwide
    //====================================================================================================================================================
    //Program Title:                                Meridian 4th Party Logistics(M4PL)
    //Programmer:                                   Akhil
    //Date Programmed:                              13/10/2017
    //Program Name:                                 ColumnAliasFormView
    //Purpose:                                      Provides view for Administration's Column Alias
    //====================================================================================================================================================*@

@using M4PL.Entities
@using System.Web.UI.WebControls
@using M4PL.Web.Providers
@model  M4PL.Web.Models.FormResult<M4PL.APIClient.ViewModels.Administration.ColumnAliasView>
@{
    ViewBag.Title = Model.PageName;
    var tableDropDownViewModel = Model.Record.ColTableName.GetTableDropDown("ColTableName", Model.ColumnSettings.FirstOrDefault("ColTableName").ColAliasName, Model.ColumnSettings.FirstOrDefault("ColTableName").IsRequired, Model.IsPopUp, Model.Permission);
    var columnsDropDownViewModel = Model.Record.ColColumnName.GetColumnDropDown("ColColumnName", Model.ColumnSettings.FirstOrDefault("ColColumnName").ColAliasName, Model.ColumnSettings.FirstOrDefault("ColColumnName").IsRequired, Model.IsPopUp, Model.Record.ColTableName, Model.Permission);
    tableDropDownViewModel.ValueChangedEvent = string.Format("function(s, e, columnCtrl, columnDropDown) {{DevExCtrl.ComboBox.ValueChangedTable(s, e, {0}, {1}); }}", "ColColumnName", Newtonsoft.Json.JsonConvert.SerializeObject(columnsDropDownViewModel));
    var lookupDropDownViewModel = FormViewProvider.GetSysRefDropDown(0, "ColLookupId", Model.ColumnSettings.FirstOrDefault("ColLookupId").ColAliasName, Model.ColumnSettings.FirstOrDefault("ColLookupId").IsRequired, Model.IsPopUp, Model.Permission);
    lookupDropDownViewModel.Disabled = Model.Record.ColLookupId.GetValueOrDefault() < 1;
    columnsDropDownViewModel.ValueChangedEvent = string.Format("function(s, e, lookupCtrl, lookupDropDown) {{DevExCtrl.ComboBox.ValueChangedColumn(s, e, {0}, {1}); }}", "ColLookupId", Newtonsoft.Json.JsonConvert.SerializeObject(lookupDropDownViewModel));
    columnsDropDownViewModel.BeginCallBack = "function(s, e, dropDownViewModel, parentControl) {{DevExCtrl.ComboBox.DropDownBeginCallBack(s, e, {0}, 'ColTableName'); }}";
}

@Html.Partial(MvcConstants.NavigationPanePartial, Model.NavigationPane)

@using (Html.BeginForm(MvcConstants.ActionAddOrEdit, Model.CallBackRoute.Controller, FormMethod.Post, new { id = Model.FormId }))
{

    @Html.DevExpress().RoundPanel(settings =>
{
    settings.Name = "pnlColumnAlias";
    settings.Width = Unit.Percentage(100);
    settings.AllowCollapsingByHeaderClick = true;
    settings.ShowCollapseButton = true;
    settings.HeaderText = "ColumnAlias";
    settings.Collapsed = false;
    settings.ControlStyle.CssClass = "form-layout";
    settings.SetContent(() =>
    {
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-13'>" + Html.EditorFor(m => m.Record.Id).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-13'>" + Html.EditorFor(m => m.Record.LangCode).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-13'>" + Html.EditorFor(m => m.Record.ColSortOrder).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-25'>" + Html.Action(MvcConstants.ActionDropDownViewTemplate, EntitiesAlias.Common.ToString(), new { Area = string.Empty, strDropDownViewModel = Newtonsoft.Json.JsonConvert.SerializeObject(tableDropDownViewModel) }) + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-25'>" + Html.Action(MvcConstants.ActionDropDownViewTemplate, EntitiesAlias.Common.ToString(), new { Area = string.Empty, strDropDownViewModel = Newtonsoft.Json.JsonConvert.SerializeObject(columnsDropDownViewModel) }) + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-25'>" + Html.EditorFor(m => m.Record.ColAliasName).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-25'>" + Html.EditorFor(m => m.Record.ColCaption).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-25'>" + Html.Action(MvcConstants.ActionIntDropDownViewTemplate, EntitiesAlias.Common.ToString(), new { Area = string.Empty, strDropDownViewModel = Newtonsoft.Json.JsonConvert.SerializeObject(lookupDropDownViewModel) }) + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-25'>" + Html.EditorFor(m => m.Record.ColGridAliasName).ToHtmlString() + "</div>"); 
        // Wrapping the default button, visible button and readonly option
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-checkbox-btns'>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-10'>" + Html.EditorFor(m => m.Record.ColIsReadOnly).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-10'>" + Html.EditorFor(m => m.Record.ColIsVisible).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-10'>" + Html.EditorFor(m => m.Record.ColIsDefault).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-10'>" + Html.EditorFor(m => m.Record.IsGridColumn).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("</div>");
        ViewContext.Writer.Write(string.Format(CssConstants.DivFormRowCls, CssConstants.ColFixed10, Html.EditorFor(m => m.Record.StatusId, new { StatusId = Model.Record.StatusId }).ToHtmlString()));

    });
}).GetHtml()
    if (!Model.IsPopUp)
    {
        <div class="form-btns-block">
            <div class="col-md-6 no-padding">
                @Html.DevExpress().Button(settings =>
           {
               settings.Name = "btn" + Model.CallBackRoute.Controller + "Save";//The name standard dependent on Ribbon's 'Save' functionality.Please make changes BaseController 'Ribbon' region 'Save' action
               settings.EnableTheming = true;
               settings.Text = (Model.Record.Id > 0) ? Model.Operations[OperationTypeEnum.Update].LangName : Model.Operations[OperationTypeEnum.Save].LangName;
               settings.AllowFocus = false;
               settings.ControlStyle.CssClass = "form-btn pull-right";
               settings.Enabled = (Model.Record.Id > 0) ? !(Model.Permission < Permission.EditAll) : !(Model.Permission < Permission.AddEdit);
               settings.ClientSideEvents.Click = Model.SubmitClick;
               settings.Images.Image.Url = WebExtension.ConvertByteToString(Model.Operations[(Model.Record.Id > 0) ? OperationTypeEnum.Edit : OperationTypeEnum.New].Icon);
           }).GetHtml()
            </div>
            <div class="col-md-6 no-padding">
                @Html.DevExpress().Button(settings =>
       {
           settings.Name = "btn" + Model.CallBackRoute.Controller + "Cancel";
           settings.EnableTheming = true;
           settings.Text = Model.Operations[OperationTypeEnum.Cancel].LangName;
           settings.AllowFocus = false;
           settings.ControlStyle.CssClass = "form-btn";
           settings.ClientSideEvents.Click = Model.CancelClick; settings.Images.Image.Url = WebExtension.ConvertByteToString(Model.Operations[OperationTypeEnum.Cancel].Icon);
       }).GetHtml()
            </div>
        </div>
    }
}