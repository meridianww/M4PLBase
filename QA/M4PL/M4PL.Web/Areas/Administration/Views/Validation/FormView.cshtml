@*Copyright (2016) Meridian Worldwide Transportation Group
    //All Rights Reserved Worldwide
    //====================================================================================================================================================
    //Program Title:                                Meridian 4th Party Logistics(M4PL)
    //Programmer:                                   Akhil
    //Date Programmed:                              13/10/2017
    //Program Name:                                 ValidationFormView
    //Purpose:                                      Provides view for Administration's Validation
    //====================================================================================================================================================*@

@using M4PL.Entities
@using System.Web.UI.WebControls
@using M4PL.Web.Providers
@model  M4PL.Web.Models.FormResult<M4PL.APIClient.ViewModels.Administration.ValidationView>
@{
    ViewBag.Title = Model.PageName;

    var tableDropDownViewModel = Model.Record.ValTableName.GetTableDropDown(ValidationEnum.ValTableName.ToString(), Model.ColumnSettings.FirstOrDefault("ValTableName").ColAliasName, Model.ColumnSettings.FirstOrDefault("ValTableName").IsRequired, Model.IsPopUp, Model.Permission);
    var columnsDropDownViewModel = Model.Record.ValFieldName.GetColumnDropDown(ValidationEnum.ValFieldName.ToString(), Model.ColumnSettings.FirstOrDefault("ValFieldName").ColAliasName, Model.ColumnSettings.FirstOrDefault("ValFieldName").IsRequired, Model.IsPopUp, Model.Record.ValTableName, Model.Permission);

    tableDropDownViewModel.ValueChangedEvent = string.Format("function(s, e, columnCtrl, columnDropDown) {{DevExCtrl.ComboBox.ValueChangedTable(s, e, {0}, {1}); }}", ValidationEnum.ValFieldName.ToString(), Newtonsoft.Json.JsonConvert.SerializeObject(columnsDropDownViewModel));
    columnsDropDownViewModel.BeginCallBack = "function(s, e, dropDownViewModel, parentControl) {{DevExCtrl.ComboBox.DropDownBeginCallBack(s, e, {0}, '" + ValidationEnum.ValTableName.ToString() + "'); }}";
}

@Html.Partial(MvcConstants.NavigationPanePartial, Model.NavigationPane)

@using (Html.BeginForm(MvcConstants.ActionAddOrEdit, Model.CallBackRoute.Controller, FormMethod.Post, new { id = Model.FormId }))
{

    @Html.DevExpress().RoundPanel(settings =>
{
    settings.Name = "pnlDatabaseValidationDetail";
    settings.Width = Unit.Percentage(100);
    settings.AllowCollapsingByHeaderClick = true;
    settings.ShowCollapseButton = true;
    settings.HeaderText = "Detail";
    settings.Collapsed = false;
    settings.ControlStyle.CssClass = "form-layout";
    settings.SetContent(() =>
    {
        ViewContext.Writer.Write("<div class='row no-margin'>");
        ViewContext.Writer.Write("<div class='full-width'>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-12'>" + Html.EditorFor(m => m.Record.Id).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-12'>" + Html.EditorFor(m => m.Record.LangCode).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-25'>" + Html.Action(MvcConstants.ActionDropDownViewTemplate, EntitiesAlias.Common.ToString(), new { Area = string.Empty, strDropDownViewModel = Newtonsoft.Json.JsonConvert.SerializeObject(tableDropDownViewModel) }) + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-25'>" + Html.Action(MvcConstants.ActionDropDownViewTemplate, EntitiesAlias.Common.ToString(), new { Area = string.Empty, strDropDownViewModel = Newtonsoft.Json.JsonConvert.SerializeObject(columnsDropDownViewModel) }) + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-5'>" + Html.EditorFor(m => m.Record.ValRequired).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-50'>" + Html.EditorFor(m => m.Record.ValRequiredMessage).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-5'>" + Html.EditorFor(m => m.Record.ValUnique).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-50'>" + Html.EditorFor(m => m.Record.ValUniqueMessage).ToHtmlString() + "</div>");
        ViewContext.Writer.Write(string.Format(CssConstants.DivFormRowCls, CssConstants.ColFixed10, Html.EditorFor(m => m.Record.StatusId, new { StatusId = Model.Record.StatusId }).ToHtmlString()));

        ViewContext.Writer.Write("</div>");
        ViewContext.Writer.Write("</div>");
    });
}).GetHtml()

    @Html.DevExpress().RoundPanel(settings =>
{
    settings.Name = "pnlDatabaseValRegex";
    settings.Width = Unit.Percentage(100);
    settings.AllowCollapsingByHeaderClick = true;
    settings.ShowCollapseButton = true;
    settings.HeaderText = "Regular Expression";
    settings.Collapsed = false;
    settings.ControlStyle.CssClass = "form-layout";
    settings.SetContent(() =>
    {
        ViewContext.Writer.Write("<div class='row no-margin'>");

        ViewContext.Writer.Write("<div class='logic1 col-lg-12 col-md-12 no-padding'>");

        ViewContext.Writer.Write("<div class='col-lg-4 col-md-4 mgn-btm-10'>" + Html.EditorFor(m => m.Record.ValRegExLogic0).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='col-lg-4 col-md-4 mgn-btm-10'>" + Html.EditorFor(m => m.Record.ValRegEx1, new { onTextChange = "function(s,e){ DevExCtrl.TextBox.OnTextChange(s,e,'logic2', 2,6,'logic');}" }).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='col-lg-4 col-md-4 mgn-btm-10'>" + Html.EditorFor(m => m.Record.ValRegExMessage1).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("</div>");

        if (Model.Record.ValRegExLogic0 == null && string.IsNullOrWhiteSpace(Model.Record.ValRegEx1))
            ViewContext.Writer.Write("<div class='logic2 pointer-event-none col-lg-12 col-md-12 no-padding'>");
        else
            ViewContext.Writer.Write("<div class='logic2 col-lg-12 col-md-12 no-padding'>");
        ViewContext.Writer.Write("<div class='col-lg-4 col-md-4 mgn-btm-10'>" + Html.EditorFor(m => m.Record.ValRegExLogic1).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='col-lg-4 col-md-4 mgn-btm-10'>" + Html.EditorFor(m => m.Record.ValRegEx2, new { onTextChange = "function(s, e){ DevExCtrl.TextBox.OnTextChange(s, e, 'logic3', 3,6,'logic'); }" }).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='col-lg-4 col-md-4 mgn-btm-10'>" + Html.EditorFor(m => m.Record.ValRegExMessage2).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("</div>");

        if (Model.Record.ValRegExLogic1 == null && string.IsNullOrWhiteSpace(Model.Record.ValRegEx2))
            ViewContext.Writer.Write("<div class='logic3 pointer-event-none col-lg-12 col-md-12 no-padding'>");
        else
            ViewContext.Writer.Write("<div class='logic3 col-lg-12 col-md-12 no-padding'>");

        ViewContext.Writer.Write("<div class='col-lg-4 col-md-4 mgn-btm-10'>" + Html.EditorFor(m => m.Record.ValRegExLogic2).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='col-lg-4 col-md-4 mgn-btm-10'>" + Html.EditorFor(m => m.Record.ValRegEx3, new { onTextChange = "function(s, e){ DevExCtrl.TextBox.OnTextChange(s, e, 'logic4',4,6,'logic'); }" }).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='col-lg-4 col-md-4 mgn-btm-10'>" + Html.EditorFor(m => m.Record.ValRegExMessage3).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("</div>");

        if (Model.Record.ValRegExLogic2 == null && string.IsNullOrWhiteSpace(Model.Record.ValRegEx3))
            ViewContext.Writer.Write("<div class='logic4 pointer-event-none col-lg-12 col-md-12 no-padding'>");
        else
            ViewContext.Writer.Write("<div class='logic4 col-lg-12 col-md-12 no-padding'>");

        ViewContext.Writer.Write("<div class='col-lg-4 col-md-4 mgn-btm-10'>" + Html.EditorFor(m => m.Record.ValRegExLogic3).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='col-lg-4 col-md-4 mgn-btm-10'>" + Html.EditorFor(m => m.Record.ValRegEx4, new { onTextChange = "function(s, e){ DevExCtrl.TextBox.OnTextChange(s, e, 'logic5', 5,6,'logic'); }" }).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='col-lg-4 col-md-4 mgn-btm-10'>" + Html.EditorFor(m => m.Record.ValRegExMessage4).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("</div>");

        if (Model.Record.ValRegExLogic3 == null && string.IsNullOrWhiteSpace(Model.Record.ValRegEx4))
            ViewContext.Writer.Write("<div class='logic5 pointer-event-none col-lg-12 col-md-12 no-padding'>");
        else
            ViewContext.Writer.Write("<div class='logic5 col-lg-12 col-md-12 no-padding'>");

        ViewContext.Writer.Write("<div class='col-lg-4 col-md-4 mgn-btm-10'>" + Html.EditorFor(m => m.Record.ValRegExLogic4).ToHtmlString() + "</div>"); // this should be 5//
        ViewContext.Writer.Write("<div class='col-lg-4 col-md-4 mgn-btm-10'>" + Html.EditorFor(m => m.Record.ValRegEx5, new { onTextChange = "function(s, e){ DevExCtrl.TextBox.OnTextChange(s, e, '', ''); }" }).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='col-lg-4 col-md-4 mgn-btm-10'>" + Html.EditorFor(m => m.Record.ValRegExMessage5).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("</div>");
        ViewContext.Writer.Write("</div>");

    });
}).GetHtml()

    @Html.Partial(MvcConstants.EnteredChangedPartial, new M4PL.Web.Models.FormResult<BaseModel> { Record = Model.Record, ColumnSettings = Model.ColumnSettings, FormId = Model.FormId, IsPopUp = Model.IsPopUp })
    if (!Model.IsPopUp)
    {
        <div class="form-btns-block">
            <div class="col-md-6 no-padding">
                @Html.DevExpress().Button(settings =>
           {
               settings.Name = "btn" + Model.CallBackRoute.Controller + "Save";//The name standard dependent on Ribbon's 'Save' functionality.Please make changes BaseController 'Ribbon' region 'Save' action
               settings.EnableTheming = true;
               settings.Text = (Model.Record.Id > 0) ? Model.Operations[OperationTypeEnum.Update].LangName : Model.Operations[OperationTypeEnum.Save].LangName;
               settings.AllowFocus = false;
               settings.ControlStyle.CssClass = "form-btn pull-right";
               settings.Enabled = (Model.Record.Id > 0) ? !(Model.Permission < Permission.EditAll) : !(Model.Permission < Permission.AddEdit);
               settings.ClientSideEvents.Click = Model.SubmitClick;
               settings.Images.Image.Url = WebExtension.ConvertByteToString(Model.Operations[(Model.Record.Id > 0) ? OperationTypeEnum.Edit : OperationTypeEnum.New].Icon);
           }).GetHtml()
            </div>
            <div class="col-md-6 no-padding">
                @Html.DevExpress().Button(settings =>
       {
           settings.Name = "btn" + Model.CallBackRoute.Controller + "Cancel";
           settings.EnableTheming = true;
           settings.Text = Model.Operations[OperationTypeEnum.Cancel].LangName;
           settings.AllowFocus = false;
           settings.ControlStyle.CssClass = "form-btn";
           settings.ClientSideEvents.Click = Model.CancelClick; settings.Images.Image.Url = WebExtension.ConvertByteToString(Model.Operations[OperationTypeEnum.Cancel].Icon);
       }).GetHtml()
            </div>
        </div>
    }
}