@using M4PL.Entities
@using System.Web.UI.WebControls
@model  M4PL.Web.Models.FormResult<M4PL.APIClient.ViewModels.Job.JobXcblInfoView>
@{
    ViewBag.Title = Model.PageName;
    Model.CallBackRoute.Action = "FormView";
    Model.CallBackRoute.OwnerCbPanel = "JobDataViewCbPanel";
    Model.Record.JobGatewayId = Model.CallBackRoute.RecordId;
    //var acceptRoute = Model.CallBackRoute;
    //acceptRoute.IsPBSReport = true;
    //var rejectRoute = Model.CallBackRoute;
    // rejectRoute.IsPBSReport = false;
}
@* @Html.Action("RecordSubPopupControl", "Popup", new { Area = string.Empty, strRoute = string.Empty, strByteArray = string.Empty })*@
@using (Html.BeginForm(MvcConstants.ActionAddOrEdit, Model.CallBackRoute.Controller, FormMethod.Post, new { id = Model.FormId }))
{
    <div class="col-md-12 no-padding job-gtw-complete">
        @Html.DevExpress().RoundPanel(settings =>
   {
       settings.Name = "pnlJobXcblInfo";
       settings.Width = Unit.Percentage(100);
       settings.AllowCollapsingByHeaderClick = true;
       settings.ShowCollapseButton = true;
       settings.HeaderText = "xCBL Info";
       settings.Collapsed = false;
       settings.ControlStyle.CssClass = "form-layout";
       settings.SetContent(() =>
       {
           ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.Id, new { Name = "Id" }).ToHtmlString());
           ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.JobGatewayId, new { Name = "JobGatewayId" }).ToHtmlString());
           ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.JobId, new { Name = "JobId" }).ToHtmlString());
           ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.CustomerSalesOrderNumber, new { Name = "CustomerSalesOrderNumber" }).ToHtmlString());
           ViewContext.Writer.Write("<div class='col-md-12'> <table class ='table table-bordered table-responsive' width ='100%'>");
           ViewContext.Writer.Write("<thead class='ConfirmatonPopUp-background'><tr><th>Column Name</th><th>Old Value</th><th>New Value</th> </tr></thead><tbody>");
           if (Model.Record.ColumnMappingData != null && Model.Record.ColumnMappingData.Any())
           {
               foreach (var item in Model.Record.ColumnMappingData)
               {
                   ViewContext.Writer.Write("<tr><td>"
                       + Html.Name(item.ColumnAlias).ToHtmlString() + "</td><td>" +
                         Html.Name(item.ExistingValue).ToHtmlString() + "</td><td>" +
                         Html.Name(item.UpdatedValue).ToHtmlString() + "</td></tr>");
               }
           }
           ViewContext.Writer.Write("</tbody></table></div>");
       });
   }).GetHtml()
    </div>

    <div class="form-btns-block">
        <div class="half-width">
            @Html.DevExpress().Button(settings =>
            {
            settings.Name = "btn" + Model.CallBackRoute.Controller + "Accept";//The name standard dependent on Ribbon's 'Save' functionality.Please make changes BaseController 'Ribbon' region 'Save' action
            settings.EnableTheming = true;
            settings.Text = "Accept";
            settings.AllowFocus = false;
            settings.ControlStyle.CssClass = "form-btn pull-right";
            settings.Enabled = (Model.Record.Id > 0) ? !(Model.Permission < Permission.EditActuals) : !(Model.Permission < Permission.EditActuals);
            settings.ClientSideEvents.Click = "function(s, e){ "
            + string.Format(JsConstants.RecordPopupSubmitClick, string.Concat(Model.CallBackRoute.Controller, "Form"), "_popup",
            Newtonsoft.Json.JsonConvert.SerializeObject(Model.CallBackRoute), true, null) + "}";

            settings.Images.Image.Url = WebExtension.ConvertByteToString(Model.Operations[(Model.Record.Id > 0) ? OperationTypeEnum.Edit : OperationTypeEnum.New].Icon);

            }).GetHtml()
        </div>
        <div class="half-width">
            @Html.DevExpress().Button(settings =>
       {
           settings.Name = "btn" + Model.CallBackRoute.Controller + "Reject";
           settings.EnableTheming = true;
           settings.Text = "Reject";
           settings.AllowFocus = false;
           settings.ControlStyle.CssClass = "form-btn pull-left";
           settings.ClientSideEvents.Click = "function(s, e){ "
           + string.Format(JsConstants.RecordPopupSubmitClick, string.Concat(Model.CallBackRoute.Controller, "Form"), "_popup",
           Newtonsoft.Json.JsonConvert.SerializeObject(Model.CallBackRoute), false, null) + "}";
           settings.Images.Image.Url = WebExtension.ConvertByteToString(Model.Operations[OperationTypeEnum.Cancel].Icon);

       }).GetHtml()
        </div>
    </div>
}