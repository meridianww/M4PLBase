@*Copyright (2018) Meridian Worldwide Transportation Group
    //All Rights Reserved Worldwide
    //====================================================================================================================================================
    //Program Title:                                Meridian 4th Party Logistics(M4PL)
    //Programmer:                                   Akhil
    //Date Programmed:                              10/07/2018
    //Program Name:                                 JobGatewayActionView
    //Purpose:                                      Provides view for Job Gateway Action
    //====================================================================================================================================================*@

@using M4PL.Entities
@using M4PL.Entities.Support;
@using System.Web.UI.WebControls;
@using M4PL.Utilities
@using M4PL.Web.Providers
@using System.Text.RegularExpressions;
@model  M4PL.Web.Models.FormResult<M4PL.APIClient.ViewModels.Job.JobGatewayView>
@{
    ViewBag.Title = Model.PageName;
    var checkChangedEvent = "DevExCtrl.CheckBox.CancelOrderActionCheckedChanged(s, e, 'DateCancelled_popup')";
    var attachmentRoute = new MvcRoute(EntitiesAlias.Attachment, MvcConstants.ActionDataView, EntitiesAlias.Attachment.ToString());
    attachmentRoute.OwnerCbPanel = Model.CallBackRoute.OwnerCbPanel;
    attachmentRoute.SetParent(EntitiesAlias.JobGateway, Model.Record.Id);
    Model.Record.ArbRecordId = Model.Record.Id == 0 ? new Random().Next(-1000, 0) : Model.Record.Id;
    var actionEnumToCompare = WebUtilities.JobGatewayActions.NotAction;
    var isEdit = Model.Permission == Permission.ReadOnly ? false : true;
    Model.Record.GwyGatewaySortOrder = Model.Record.Id == 0 ? Model.Record.ItemNumber : Model.Record.GwyGatewaySortOrder;

    if ((bool)Session["isEdit"])
    {
        Model.ColumnSettings.FirstOrDefault(x => x.ColColumnName == "GwyAddtionalComment").ColIsReadOnly = true;
    }
    if (Model.Record.CurrentAction != null)
    {
        if (Model.Record.CurrentAction == "Delivery Window")
        {
            Model.ColumnSettings.FirstOrDefault(x => x.ColColumnName == "GwyDDPNew").ColIsReadOnly = true;
        }
        else
        {
            if (!(bool)Session["isEdit"])
            {
                Model.Record.GwyDDPNew = null;
            }
            Model.ColumnSettings.FirstOrDefault(x => x.ColColumnName == "GwyDDPNew").ColIsReadOnly = false;
        }

        var actionToCompare = Regex.Replace(Model.Record.CurrentAction, @"\s+", "");
        actionEnumToCompare = WebUtilities.JobGatewayActions.Anonymous;
        Enum.TryParse(actionToCompare, true, out actionEnumToCompare);
    }
    Model.Record.GatewayTypeId = (int)JobGatewayType.Action;

    if (Model.Record.CurrentAction.ToLower() == "exception")
    {
        Model.ColumnSettings.FirstOrDefault(x => x.ColColumnName == "GwyExceptionTitleId").ColAliasName = "Exception Reason";
        Model.ColumnSettings.FirstOrDefault(x => x.ColColumnName == "GwyExceptionTitleId").ColCaption = "Exception Reason";
    }
    else if (Model.Record.CurrentAction.ToLower() == "canceled" || Model.Record.CurrentAction.ToLower() == "reschedule")
    {
        Model.ColumnSettings.FirstOrDefault(x => x.ColColumnName == "GwyExceptionTitleId").ColAliasName = "Reason Code";
        Model.ColumnSettings.FirstOrDefault(x => x.ColColumnName == "GwyExceptionTitleId").ColCaption = "Reason Code";
    }

    var crgoDropDownViewModel = Model.Record.GwyCargoId.GetCargoDropDown("GwyCargoId", Model, Model.Record.JobID ?? 0);

    var exceptionDropDownViewModel = Model.Record.GwyExceptionTitleId.GetExceptionCodeDropDown("GwyExceptionTitleId", Model, Model.Record.JobID ?? 0);

    var exStatusDropDownViewModel = Model.Record.GwyExceptionStatusId.GetExStatusCodeDropDown("GwyExceptionStatusId", Model, Model.Record.JobID ?? 0, Model.Record.CurrentAction.ToLower());
}

@using (Html.BeginForm(MvcConstants.ActionJobActionAddOrEdit, Model.CallBackRoute.Controller, FormMethod.Post, new { id = Model.FormId, @class = "col-lg-12 col-md-12" }))
{
    @Html.DevExpress().RoundPanel(settings =>
{
    settings.Name = "pnlJobGatewayAction";
    settings.Width = Unit.Percentage(100);
    settings.AllowCollapsingByHeaderClick = true;
    settings.ShowCollapseButton = true;
    settings.HeaderText = "Detail";
    settings.Collapsed = false;
    settings.ControlStyle.CssClass = "form-layout";
    settings.SetContent(() =>
    {
        #region Hidden
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.ArbRecordId, new { Name = "ArbRecordId" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.ParentId, new { Name = "ParentId" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.IsAction, new { Name = "IsAction" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.CurrentAction, new { Name = "CurrentAction" }).ToHtmlString());
        /*Below hidden fields for Gateway non action fields*/
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.Id, new { Name = "Id" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.ClosedByContactExist, new { Name = "ClosedByContactExist" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.JobID, new { Name = "JobID" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyGatewaySortOrder, new { Name = "GwyGatewaySortOrder" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GatewayTypeId, new { Name = "GatewayTypeId" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyGatewayCode, new { Name = "GwyGatewayCode" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyGatewayTitle, new { Name = "GwyGatewayTitle" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyGatewayAnalyst, new { Name = "GwyGatewayAnalyst" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyGatewayResponsible, new { Name = "GwyGatewayResponsible" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyClosedBy, new { Name = "GwyClosedBy" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyGatewayDuration, new { Name = "GwyGatewayDuration" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GatewayUnitId, new { Name = "GatewayUnitId" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyGatewayDefault, new { Name = "GwyGatewayDefault" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyGatewayECD, new { Name = "GwyGatewayECD" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyGatewayPCD, new { Name = "GwyGatewayPCD" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyDateRefTypeId, new { Name = "GwyDateRefTypeId" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.Scanner, new { Name = "Scanner" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyShipApptmtReasonCode, new { Name = "GwyShipApptmtReasonCode" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyShipStatusReasonCode, new { Name = "GwyShipStatusReasonCode" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyOrderType, new { Name = "GwyOrderType" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyShipmentType, new { Name = "GwyShipmentType" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.StatusId, new { Name = "StatusId" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyUpdatedById, new { Name = "GwyUpdatedById" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyClosedOn, new { Name = "GwyClosedOn" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.DefaultTime, new { Name = "DefaultTime" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyLwrDate, new { Name = "GwyLwrDate" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyUprDate, new { Name = "GwyUprDate" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyLwrWindow, new { Name = "GwyLwrWindow" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyUprWindow, new { Name = "GwyUprWindow" }).ToHtmlString());
        ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyAddtionalComment, new { Name = "GwyAddtionalComment" }).ToHtmlString());
        #endregion

        if (actionEnumToCompare != WebUtilities.JobGatewayActions.NotAction && actionEnumToCompare != WebUtilities.JobGatewayActions.Canceled)
        {
            ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyCompleted, new { Name = "GwyCompleted" }).ToHtmlString());
        }

        if (actionEnumToCompare != WebUtilities.JobGatewayActions.NotAction && actionEnumToCompare != WebUtilities.JobGatewayActions.DeliveryWindow)
        {
            ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyLwrDate, new { Name = "GwyLwrDate" }).ToHtmlString());
            ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyUprDate, new { Name = "GwyUprDate" }).ToHtmlString());
        }

        ViewContext.Writer.Write("<div class='row no-margin'>");
        ViewContext.Writer.Write("<div class='col-lg-6 col-md-6 no-padding schedul-details'>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-50'>" + Html.EditorFor(m => m.Record.GwyPerson).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-50'>" + Html.EditorFor(m => m.Record.GwyPhone).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-50'>" + Html.EditorFor(m => m.Record.GwyEmail).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-50'>" + Html.EditorFor(m => m.Record.GwyPreferredMethod, new { JobPreferredMethod = Model.Record.GwyPreferredMethod }).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("<div class='form-row-group col-fixed-50'>" + Html.EditorFor(m => m.Record.GwyTitle).ToHtmlString() + "</div>");
        ViewContext.Writer.Write("</div>");

        if (actionEnumToCompare == WebUtilities.JobGatewayActions.Canceled)
        {
            ViewContext.Writer.Write("<div class='col-lg-6 col-md-6 no-padding'>");
            @Html.DevExpress().FormLayout(
                              contactEmailsettings =>
                              {
                                  contactEmailsettings.Name = "CancelOrderPlanned";
                                  contactEmailsettings.ControlStyle.CssClass = "cancel-order";

                                  contactEmailsettings.Items.AddGroupItem(cEmailsettings =>
                                  {
                                      cEmailsettings.Caption = "Cancel Order";
                                      cEmailsettings.Items.Add(n =>
                                      {
                                          n.Caption = "";
                                          n.SetNestedContent(() =>
                                          {
                                              ViewContext.Writer.Write("<div class='form-row-group col-fixed-17'>" + Html.EditorFor(m => m.Record.CancelOrder, new { CheckedChanged = checkChangedEvent }).ToHtmlString() + "</div>");
                                              ViewContext.Writer.Write("<div class='form-row-group col-fixed-17'>" + Html.EditorFor(m => m.Record.GwyDDPCurrent, new { EnableTimeSection = true }).ToHtmlString() + "</div>");
                                              ViewContext.Writer.Write("<div class='form-row-group col-fixed-17'>" + Html.EditorFor(m => m.Record.DateCancelled, new { EnableTimeSection = true }).ToHtmlString() + "</div>");
                                              ViewContext.Writer.Write("<div class='form-row-group col-fixed-5 remove-margin-right'>" + Html.EditorFor(m => m.Record.StatusCode).ToHtmlString() + "</div>");

                                          });
                                      });
                                  });
                                  contactEmailsettings.Items.AddGroupItem(eReschedulesettings =>
                                  {
                                      eReschedulesettings.Caption = "Reason";
                                      eReschedulesettings.Items.Add(n =>
                                      {
                                          n.Caption = "";
                                          n.SetNestedContent(() =>
                                          {
                                              ViewContext.Writer.Write("<div class='form-row-group col-fixed-16'>" + Html.Action(MvcConstants.ActionDropDownViewTemplate, EntitiesAlias.Common.ToString(), new { Area = string.Empty, strDropDownViewModel = Newtonsoft.Json.JsonConvert.SerializeObject(exceptionDropDownViewModel) }) + "</div>");
                                              ViewContext.Writer.Write("<div class='form-row-group col-fixed-16'>" + Html.Action(MvcConstants.ActionDropDownViewTemplate, EntitiesAlias.Common.ToString(), new { Area = string.Empty, strDropDownViewModel = Newtonsoft.Json.JsonConvert.SerializeObject(exStatusDropDownViewModel) }) + "</div>");
                                              ViewContext.Writer.Write("<div class='col-lg-12 col-md-12 no-padding'>");
                                              ViewContext.Writer.Write("<div class='form-row-group  col-lg-12 col-md-12 no-padding'>" + Html.EditorFor(m => m.Record.GwyAddtionalComment, "MultilineText").ToHtmlString() + "</div>");
                                              ViewContext.Writer.Write("</div>");
                                          });
                                      });
                                  });
                              }
                          ).GetHtml();
            ViewContext.Writer.Write("</div>");
            ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyDDPNew, new { Name = "GwyDDPNew" }).ToHtmlString());
        }
        else if (actionEnumToCompare == WebUtilities.JobGatewayActions.DeliveryWindow)
        {
            ViewContext.Writer.Write("<div class='col-lg-6 col-md-6 no-padding'>");

            @Html.DevExpress().FormLayout(
                              contactEmailsettings =>
                              {
                                  contactEmailsettings.Name = "DeliveryWindow";
                                  contactEmailsettings.ControlStyle.CssClass = "deliverywindow";

                                  contactEmailsettings.Items.AddGroupItem(cEmailsettings =>
                                  {
                                      cEmailsettings.Caption = "Delivery Window";
                                      cEmailsettings.Items.Add(n =>
                                      {
                                          n.Caption = "";
                                          n.SetNestedContent(() =>
                                          {
                                              ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyDDPCurrent, new { Name = "GwyDDPCurrent" }).ToHtmlString());
                                              ViewContext.Writer.Write("<div class='form-row-group col-fixed-17'>" + Html.EditorFor(m => m.Record.GwyDDPNew, new { EnableTimeSection = true }).ToHtmlString() + "</div>");
                                              ViewContext.Writer.Write("<div class='form-row-group col-fixed-5'>" + Html.EditorFor(m => m.Record.StatusCode).ToHtmlString() + "</div>");
                                              ViewContext.Writer.Write("<div class='form-row-group col-fixed-17'>" + Html.EditorFor(m => m.Record.GwyLwrDate, MvcConstants.EditorTimeEdit, new { SetDefaultTime = false, DefaultTime = Model.Record.GwyLwrDate, IsEditable = isEdit }).ToHtmlString() + "</div>");
                                              ViewContext.Writer.Write("<div class='form-row-group col-fixed-17'>" + Html.EditorFor(m => m.Record.GwyUprDate, MvcConstants.EditorTimeEdit, new { SetDefaultTime = true, DefaultTime = Model.Record.GwyUprDate, IsEditable = isEdit }).ToHtmlString() + "</div>");
                                              ViewContext.Writer.Write("<div class='form-row-group col-fixed-17'>" + Html.EditorFor(m => m.Record.GwyGatewayACD, new { EnableTimeSection = true }).ToHtmlString() + "</div>");
                                          });
                                      });
                                  });
                              }
                          ).GetHtml();
            ViewContext.Writer.Write("</div>");
            ViewContext.Writer.Write("</div>");
            ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyDDPNew, new { Name = "GwyDDPNew" }).ToHtmlString());
        }
        else if (actionEnumToCompare == WebUtilities.JobGatewayActions.EMail)
        {
            ViewContext.Writer.Write("<div class='col-lg-6 col-md-6 no-padding'>");
            @Html.DevExpress().FormLayout(
                              contactEmailsettings =>
                              {
                                  contactEmailsettings.Name = "EmailDateDDP";
                                  contactEmailsettings.ControlStyle.CssClass = "emaildate";

                                  contactEmailsettings.Items.AddGroupItem(cEmailsettings =>
                                  {
                                      cEmailsettings.Caption = "Email Date/DDP";
                                      cEmailsettings.Items.Add(n =>
                                      {
                                          n.Caption = "";
                                          n.SetNestedContent(() =>
                                          {
                                              ViewContext.Writer.Write("<div class='form-row-group col-fixed-17'>" + Html.EditorFor(m => m.Record.GwyDDPCurrent, new { EnableTimeSection = true }).ToHtmlString() + "</div>");
                                              ViewContext.Writer.Write("<div class='form-row-group col-fixed-17'>" + Html.EditorFor(m => m.Record.DateEmail, new { EnableTimeSection = true }).ToHtmlString() + "</div>");
                                              ViewContext.Writer.Write("<div class='form-row-group col-fixed-5 remove-margin-right'>" + Html.EditorFor(m => m.Record.StatusCode).ToHtmlString() + "</div>");

                                          });
                                      });
                                  });
                              }
                          ).GetHtml();
            ViewContext.Writer.Write("</div>");
            ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyDDPNew, new { Name = "GwyDDPNew" }).ToHtmlString());
        }
        else if ((actionEnumToCompare == WebUtilities.JobGatewayActions.Schedule)
        || (actionEnumToCompare == WebUtilities.JobGatewayActions.Reschedule))
        {
            ViewContext.Writer.Write("<div class='col-lg-6 col-md-6 no-padding'>");

            @Html.DevExpress().FormLayout(
                               contactEmailsettings =>
                               {
                                   contactEmailsettings.Name = "DeliveryDatePlanned";
                                   contactEmailsettings.ControlStyle.CssClass = "delivery-date";
                                   contactEmailsettings.Items.AddGroupItem(cEmailsettings =>
                                   {
                                       cEmailsettings.Caption = "Delivery Date Planned(DDP)";
                                       cEmailsettings.Items.Add(n =>
                                       {
                                           n.Caption = "";
                                           n.SetNestedContent(() =>
                                           {
                                               if (Model.Record.CurrentAction == "Schedule")
                                               {
                                                   Model.Record.GwyDDPNew = !(bool)Session["isEdit"] ? Model.Record.GwyDDPCurrent : Model.Record.GwyDDPNew;
                                                   Model.ColumnSettings.FirstOrDefault(x => x.ColColumnName == "GwyDDPNew").ColAliasName = "Schedule Date";
                                                   Model.ColumnSettings.FirstOrDefault(x => x.ColColumnName == "GwyDDPNew").ColCaption = "Schedule Date";
                                                   ViewContext.Writer.Write("<div class='form-row-group col-fixed-17'>" + Html.EditorFor(m => m.Record.GwyDDPNew, new { EnableTimeSection = true }).ToHtmlString() + "</div>");
                                                   ViewContext.Writer.Write("<div class='form-row-group col-fixed-17'> </div>");
                                               }
                                               else
                                               {
                                                   Model.ColumnSettings.FirstOrDefault(x => x.ColColumnName == "GwyDDPNew").ColAliasName = "Reschedule Date";
                                                   Model.ColumnSettings.FirstOrDefault(x => x.ColColumnName == "GwyDDPNew").ColCaption = "Reschedule Date";
                                                   ViewContext.Writer.Write("<div class='form-row-group col-fixed-17'>" + Html.EditorFor(m => m.Record.GwyDDPCurrent, new { EnableTimeSection = true }).ToHtmlString() + "</div>");
                                                   ViewContext.Writer.Write("<div class='form-row-group col-fixed-17'>" + Html.EditorFor(m => m.Record.GwyDDPNew, new { EnableTimeSection = true }).ToHtmlString() + "</div>");
                                               }
                                               ViewContext.Writer.Write("<div class='form-row-group col-fixed-17'>" + Html.EditorFor(m => m.Record.GwyGatewayACD, new { EnableTimeSection = true }).ToHtmlString() + "</div>");
                                               ViewContext.Writer.Write("<div class='form-row-group col-fixed-5 remove-margin-right'>" + Html.EditorFor(m => m.Record.StatusCode).ToHtmlString() + "</div>");
                                           });
                                       });
                                   });
                                   if (Model.Record.CurrentAction != "Schedule")
                                   {
                                       contactEmailsettings.Items.AddGroupItem(eReschedulesettings =>
                                       {
                                           eReschedulesettings.Caption = "Reason";
                                           eReschedulesettings.Items.Add(n =>
                                           {
                                               n.Caption = "";
                                               n.SetNestedContent(() =>
                                               {
                                                   ViewContext.Writer.Write("<div class='form-row-group col-fixed-16'>" + Html.Action(MvcConstants.ActionDropDownViewTemplate, EntitiesAlias.Common.ToString(), new { Area = string.Empty, strDropDownViewModel = Newtonsoft.Json.JsonConvert.SerializeObject(exceptionDropDownViewModel) }) + "</div>");
                                                   ViewContext.Writer.Write("<div class='form-row-group col-fixed-16'>" + Html.Action(MvcConstants.ActionDropDownViewTemplate, EntitiesAlias.Common.ToString(), new { Area = string.Empty, strDropDownViewModel = Newtonsoft.Json.JsonConvert.SerializeObject(exStatusDropDownViewModel) }) + "</div>");
                                                   ViewContext.Writer.Write("<div class='col-lg-12 col-md-12 no-padding'>");
                                                   ViewContext.Writer.Write("<div class='form-row-group  col-lg-12 col-md-12 no-padding'>" + Html.EditorFor(m => m.Record.GwyAddtionalComment, "MultilineText").ToHtmlString() + "</div>");
                                                   ViewContext.Writer.Write("</div>");
                                               });
                                           });
                                       });
                                   }
                               }
                           ).GetHtml();

            ViewContext.Writer.Write("</div>");
            ViewContext.Writer.Write("</div>");
        }
        else if(actionEnumToCompare == WebUtilities.JobGatewayActions.Exception)
        {
            /*By Default will consider as comment entry*/

            ViewContext.Writer.Write("<div class='col-lg-6 col-md-6 no-padding'>");

            @Html.DevExpress().FormLayout(
                              contactEmailsettings =>
                              {
                                  contactEmailsettings.Name = "CommentedDateDDP";
                                  contactEmailsettings.ControlStyle.CssClass = "commenteddate";

                                  contactEmailsettings.Items.AddGroupItem(cEmailsettings =>
                                  {
                                      cEmailsettings.Caption = "Action added";
                                      cEmailsettings.Items.Add(n =>
                                      {
                                          n.Caption = "";
                                          n.SetNestedContent(() =>
                                          {
                                              ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyDDPCurrent, new { Name = "GwyDDPCurrent" }).ToHtmlString());
                                              //ViewContext.Writer.Write("<div class='form-row-group col-fixed-17'>" + Html.EditorFor(m => m.Record.GwyDDPCurrent, new { EnableTimeSection = true }).ToHtmlString() + "</div>");
                                              ViewContext.Writer.Write("<div class='form-row-group col-fixed-17'>" + Html.EditorFor(m => m.Record.DateComment, new { EnableTimeSection = true }).ToHtmlString() + "</div>");
                                              ViewContext.Writer.Write("<div class='form-row-group col-fixed-5 remove-margin-right'>" + Html.EditorFor(m => m.Record.StatusCode).ToHtmlString() + "</div>");

                                          });
                                      });
                                  });
                                  contactEmailsettings.Items.AddGroupItem(eReschedulesettings =>
                                  {
                                      eReschedulesettings.Caption = "Reason";
                                      eReschedulesettings.Items.Add(n =>
                                      {
                                          n.Caption = "";
                                          n.SetNestedContent(() =>
                                          {
                                              ViewContext.Writer.Write("<div class='form-row-group col-fixed-16'>" + Html.Action(MvcConstants.ActionDropDownViewTemplate, EntitiesAlias.Common.ToString(), new { Area = string.Empty, strDropDownViewModel = Newtonsoft.Json.JsonConvert.SerializeObject(crgoDropDownViewModel) }) + "</div>");
                                              ViewContext.Writer.Write("<div class='form-row-group col-fixed-16'>" + Html.Action(MvcConstants.ActionDropDownViewTemplate, EntitiesAlias.Common.ToString(), new { Area = string.Empty, strDropDownViewModel = Newtonsoft.Json.JsonConvert.SerializeObject(exceptionDropDownViewModel) }) + "</div>");
                                              ViewContext.Writer.Write("<div class='form-row-group col-fixed-16'>" + Html.Action(MvcConstants.ActionDropDownViewTemplate, EntitiesAlias.Common.ToString(), new { Area = string.Empty, strDropDownViewModel = Newtonsoft.Json.JsonConvert.SerializeObject(exStatusDropDownViewModel) }) + "</div>");
                                              ViewContext.Writer.Write("<div class='col-lg-12 col-md-12 no-padding'>");
                                              ViewContext.Writer.Write("<div class='form-row-group  col-lg-12 col-md-12 no-padding'>" + Html.EditorFor(m => m.Record.GwyAddtionalComment, "MultilineText").ToHtmlString() + "</div>");
                                              ViewContext.Writer.Write("</div>");
                                          });
                                      });
                                  });
                              }
                          ).GetHtml();

            ViewContext.Writer.Write("</div>");
            ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyDDPNew, new { Name = "GwyDDPNew" }).ToHtmlString());
        }
        else
        {
            /*By Default will consider as comment entry*/

            ViewContext.Writer.Write("<div class='col-lg-6 col-md-6 no-padding'>");

            @Html.DevExpress().FormLayout(
                              contactEmailsettings =>
                              {
                                  contactEmailsettings.Name = "CommentedDateDDP";
                                  contactEmailsettings.ControlStyle.CssClass = "commenteddate";

                                  contactEmailsettings.Items.AddGroupItem(cEmailsettings =>
                                  {
                                      cEmailsettings.Caption = "Action added";
                                      cEmailsettings.Items.Add(n =>
                                      {
                                          n.Caption = "";
                                          n.SetNestedContent(() =>
                                          {
                                              ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyDDPCurrent, new { Name = "GwyDDPCurrent" }).ToHtmlString());
                                              //ViewContext.Writer.Write("<div class='form-row-group col-fixed-17'>" + Html.EditorFor(m => m.Record.GwyDDPCurrent, new { EnableTimeSection = true }).ToHtmlString() + "</div>");
                                              ViewContext.Writer.Write("<div class='form-row-group col-fixed-17'>" + Html.EditorFor(m => m.Record.DateComment, new { EnableTimeSection = true }).ToHtmlString() + "</div>");
                                              ViewContext.Writer.Write("<div class='form-row-group col-fixed-5 remove-margin-right'>" + Html.EditorFor(m => m.Record.StatusCode).ToHtmlString() + "</div>");
                                          });
                                      });
                                  });
                              }
                          ).GetHtml();

            ViewContext.Writer.Write("</div>");
            ViewContext.Writer.Write(Html.HiddenFor(m => m.Record.GwyDDPNew, new { Name = "GwyDDPNew" }).ToHtmlString());
        }

        //if(actionEnumToCompare ==WebUtilities.JobGatewayActions.Canceled
        //|| actionEnumToCompare == WebUtilities.JobGatewayActions.Exception
        //|| actionEnumToCompare == WebUtilities.JobGatewayActions.Reschedule)
        //{
        //    ViewContext.Writer.Write("<div class='col-lg-12 col-md-12 no-padding'>");
        //    ViewContext.Writer.Write("<div class='form-row-group  col-lg-12 col-md-12 no-padding'>" + Html.EditorFor(m => m.Record.GwyAddtionalComment, "MultilineText").ToHtmlString() + "</div>");
        //    ViewContext.Writer.Write("</div>");
        //}

        //ViewContext.Writer.Write("<div class='col-lg-12 col-md-12 no-padding'>");
        //ViewContext.Writer.Write("</div>");
    });
}).GetHtml()

    @Html.DevExpress().RoundPanel(settings =>
    {
        settings.Name = "pnlJgaNotes";
        settings.Width = Unit.Percentage(100);
        settings.AllowCollapsingByHeaderClick = true;
        settings.ShowCollapseButton = true;
        settings.HeaderText = "Notes";
        settings.Collapsed = true;
        settings.ControlStyle.CssClass = "form-layout";
        settings.SetContent(() =>
        {
            Html.RenderAction(MvcConstants.ActionRichEditComments, Model.CallBackRoute.Controller, new { Area = Model.CallBackRoute.Area, docId = new M4PL.Entities.Support.Filter { FieldName = "ArbRecordId", Value = Model.Record.ArbRecordId.ToString() }, viewRecord = Model.Record, isPopup = Model.IsPopUp, strRoute = Newtonsoft.Json.JsonConvert.SerializeObject(Model.CallBackRoute) });
        });
    }).GetHtml()

    if (actionEnumToCompare == WebUtilities.JobGatewayActions.EMail)
    {
        @Html.Partial(MvcConstants.ViewAttachmentDataViewPartial, attachmentRoute, new ViewDataDictionary { { "Count", Model.Record.GwyAttachments } })
    }

    @Html.Partial(MvcConstants.EnteredChangedPartial, new M4PL.Web.Models.FormResult<BaseModel> { Record = Model.Record, ColumnSettings = Model.ColumnSettings, FormId = Model.FormId, IsPopUp = Model.IsPopUp })
}
<input type="hidden" name="gvVisibleIndex" id="gvVisibleIndex" />
<input type="hidden" name="hf" id="hf" />