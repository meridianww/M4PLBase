@using M4PL.Utilities
@model M4PL.APIClient.ViewModels.DropDownViewModel
@{
    M4PL.APIClient.Common.ICommonCommands _commonCommands = null;
    if (ViewData[WebApplicationConstants.CommonCommand] is M4PL.APIClient.Common.ICommonCommands)
    {
        _commonCommands = ViewData[WebApplicationConstants.CommonCommand] as M4PL.APIClient.Common.ICommonCommands;
    }
    var columnSettings = _commonCommands.GetColumnSettings(M4PL.Entities.EntitiesAlias.Contact);

    if (_commonCommands != null && columnSettings != null)
    {
        var contact = _commonCommands.GetContactById(Model.SelectedId.ToLong()) ?? new M4PL.APIClient.ViewModels.Contact.ContactView();
        var contactRoute = new M4PL.Entities.Support.MvcRoute(M4PL.Entities.EntitiesAlias.Contact, MvcConstants.ActionContactCardForm, M4PL.Entities.EntitiesAlias.Contact.ToString());
        contactRoute.RecordId = Model.SelectedId == null ? 0 : Model.SelectedId.ToLong();
        contactRoute.IsPopup = true;
        contactRoute.EntityName = (!string.IsNullOrWhiteSpace(contactRoute.EntityName)) ? contactRoute.EntityName : contactRoute.Entity.ToString();
        contactRoute.OwnerCbPanel = string.Format("{0}CbPanel", Model.ControlName);
        contactRoute.ParentEntity = Model.ParentEntity;

        <div class="org-ref-phone form-row-group job-team-member">
            @if (!Model.Disabled)
            {
                <div class="job-driver">
                    @Html.Action(MvcConstants.ActionDropDownViewTemplate, M4PL.Entities.EntitiesAlias.Common.ToString(), new { Area = string.Empty, strDropDownViewModel = Newtonsoft.Json.JsonConvert.SerializeObject(Model) })
                </div>
                <div class="second-popup driver-btn">
                    @Html.DevExpress().Button(settings =>
               {
                   settings.Name = "btn" + Model.ControlName + Model.SelectedId;
                   settings.EnableTheming = true;
                   settings.ClientEnabled = !Model.Disabled;
                   settings.Text = "";
                   settings.AllowFocus = false;
                   settings.ClientSideEvents.Click = string.Format("function(ownerCbPanel, dropDownViewModel, contactRoute) {{M4PLCommon.ContactCombobox.OnAddClick({0}, {1}, {2}); }}", string.Format("{0}CbPanel", Model.ControlName), Newtonsoft.Json.JsonConvert.SerializeObject(Model), Newtonsoft.Json.JsonConvert.SerializeObject(contactRoute));
                   settings.ControlStyle.CssClass = "form-btn pull-right contactddIcon rolesresp-btn";
                   settings.ImagePosition = ImagePosition.Right;
                   settings.Images.Image.IconID = IconID.PeopleCustomer16x16;

               }).GetHtml()
                </div>
}
            else
            {
                @Html.DevExpress().TextBox(settings =>
           {
               settings.Name = Model.IsPopup ? Model.ControlName + WebApplicationConstants.PopupSuffix : Model.ControlName;
               settings.Properties.Caption = Model.ControlCaption;
               settings.Properties.CaptionSettings.ShowColon = false;
               settings.ReadOnly = true;
               settings.Properties.CaptionSettings.Position = EditorCaptionPosition.Top;
               settings.Properties.ValidationSettings.RequiredField.IsRequired = Model.IsRequired;
               settings.ControlStyle.CssClass = "readonlyBgColor";
               settings.Text = contact.ConFullName;
           }).GetHtml()
}
        </div>
    }
}