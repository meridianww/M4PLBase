@*Copyright (2016) Meridian Worldwide Transportation Group
    //All Rights Reserved Worldwide
    //====================================================================================================================================================
    //Program Title:                                Meridian 4th Party Logistics(M4PL)
    //Programmer:                                   Akhil
    //Date Programmed:                              13/10/2017
    //Program Name:                                 _RichEditPartial
    //Purpose:                                      Provides view for RichEdit
    //====================================================================================================================================================*@

@model M4PL.Web.Models.FormResult<M4PL.Entities.Support.ByteArray>
@{
    var byteArray = new M4PL.Entities.Support.ByteArray(Model.Record);
}
@Html.DevExpress().RichEdit(settings =>
{
    settings.Name = Model.Record.ControlName;
    settings.CallbackRouteValues = new { Controller = Model.CallBackRoute.Controller, Action = Model.CallBackRoute.Action, Area = Model.CallBackRoute.Area, strByteArray = Newtonsoft.Json.JsonConvert.SerializeObject(byteArray) };
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.ShowConfirmOnLosingChanges = false;
    settings.Height = 400;
    settings.ReadOnly = false;
    settings.ControlStyle.CssClass = "form-layout";
    settings.EnableClientSideAPI = true;
    settings.SettingsDocumentSelector.UploadSettings.Enabled = true;
    settings.ClientSideEvents.CustomCommandExecuted = "function(route, byteArray){ M4PLCommon.RichEdit.OpenDialog(" + Newtonsoft.Json.JsonConvert.SerializeObject(new M4PL.Entities.Support.MvcRoute(Model.CallBackRoute, "GetOpenDialog")) + "," + Newtonsoft.Json.JsonConvert.SerializeObject(byteArray) + ");}";
    settings.ClientSideEvents.EndCallback = "M4PLCommon.RichEdit.OnEndCallBack";
    settings.CustomActionRouteValues = new { Controller = Model.CallBackRoute.Controller, Action = "RichEditorCustomCallBack", Area = Model.CallBackRoute.Area, strByteArray = Newtonsoft.Json.JsonConvert.SerializeObject(byteArray) };
    settings.PreRender = (s, e) =>
    {
        MVCxRichEdit richEdit = (MVCxRichEdit)s;
        richEdit.CreateDefaultRibbonTabs(false);
        richEdit.RibbonTabs.Find(x => x is RERMailMergeTab).Visible = false;// Mail Merge tab

        //Custom Open button
        richEdit.RibbonTabs[0].Groups[0].Items.RemoveAll(x => x is REROpenCommand);
        richEdit.RibbonTabs[0].Groups[0].Items.RemoveAll(x => x is RERSaveAsCommand);
        richEdit.RibbonTabs[0].Groups[0].Items.RemoveAll(x => x is RERSaveCommand);
        richEdit.RibbonTabs[0].Groups[0].Items.RemoveAll(x => x is RERNewCommand);
        richEdit.RibbonTabs[0].Groups[0].Items.Insert(1, new RibbonButtonItem
        {
            Size = RibbonItemSize.Large,
            LargeImage = { IconID = IconID.ActionsOpen32x32 },
            Text = "Open Document",
            Name = "open"
        });
        richEdit.Focus();
    };
    settings.RibbonMode = RichEditRibbonMode.OneLineRibbon;
    settings.EnableClientSideAPI = true;
    settings.ClientSideEvents.GotFocus = "M4PLCommon.Control.OnGotFocus";
    settings.ClientSideEvents.DocumentChanged = "function(s, e){ M4PLCommon.Control.OnTextChanged(); }";
}).Open(Model.Record.DocumentId, DevExpress.XtraRichEdit.DocumentFormat.OpenXml, () =>
{
    return (Model.Record.Bytes != null && Model.Record.Bytes.Length > 100) ? Model.Record.Bytes : File.ReadAllBytes(Server.MapPath("~/App_data/Blank.docx"));
}).GetHtml()