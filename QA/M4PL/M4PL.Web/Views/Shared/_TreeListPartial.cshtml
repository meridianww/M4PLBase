@*Copyright (2018) Meridian Worldwide Transportation Group

    //====================================================================================================================================================
    //Program Title:                               Tree list partial
    //Programmer:                                   Kirty Anurag
    //Date Programmed:                              17/01/2018
    //Program Name:                                 _TreeListPartial
    //Purpose:                                      Provides tree list for entity
    //====================================================================================================================================================*@
@model M4PL.Web.Models.TreeListResult
@{
    var contentCbPanel = string.Concat(Model.ContentRouteCallBack.Entity, Model.ContentRouteCallBack.Action, "CbPanel");

}
@Html.DevExpress().TreeList(
    settings =>
    {
        settings.Name = "TreeList";
        settings.CallbackRouteValues = new { Controller = Model.CallBackRoute.Controller, Action = Model.CallBackRoute.Action, Area = Model.CallBackRoute.Area, strRoute = Newtonsoft.Json.JsonConvert.SerializeObject(Model.CallBackRoute) };
        settings.SettingsCookies.StoreExpandedNodes = true;
        settings.Width = System.Web.UI.WebControls.Unit.Percentage(95);
        settings.SettingsBehavior.AllowDragDrop = Model.TreeListSettings.AllowDragDrop;
        settings.AutoGenerateColumns = false;
        if (Model.TreeListSettings.AllowDragDrop)
            settings.SettingsEditing.NodeDragDropRouteValues = new { Controller = Model.DragAndDropRoute.Controller, Action = Model.DragAndDropRoute.Action, Area = Model.DragAndDropRoute.Area, strRoute = Newtonsoft.Json.JsonConvert.SerializeObject(Model.DragAndDropRoute) };
        settings.KeyFieldName = "Route";
        settings.ParentFieldName = Model.ParentFieldName;
        settings.Settings.ShowColumnHeaders = false;
        settings.ClientSideEvents.Init = "function(s,e,contentCbPanel,contentCbPanelRoute){DevExCtrl.TreeList.Init(s,e," + contentCbPanel + ",'" + Newtonsoft.Json.JsonConvert.SerializeObject(Session["CurrentRoute"] != null ? Session["CurrentRoute"] as M4PL.Entities.Support.MvcRoute : new M4PL.Entities.Support.MvcRoute()) + "');}";
        settings.SettingsBehavior.AllowFocusedNode = true;
        settings.ClientLayout = (sender, e) =>
        {
            if (e.LayoutMode == ClientLayoutMode.Saving)
                Session["TreeListLayoutData"] = e.LayoutData;
            else
                e.LayoutData = (string)Session["TreeListLayoutData"];
        };
        settings.ClientSideEvents.NodeClick = "function(s,e,contentCbPanel,contentCbPanelRoute){DevExCtrl.TreeList.OnNodeClick(s,e," + contentCbPanel + ",'" + Newtonsoft.Json.JsonConvert.SerializeObject(Model.ContentRouteCallBack) + "');}";
       
        settings.Columns.Clear();
        settings.CustomJSProperties = (s, e) =>
        {
            e.Properties["cpIsJobParent"] = Session["IsJobParent"];
            e.Properties["cpselectedNode"] = Model.SelectedNode;
        };

        settings.Columns.Add(
            column =>
            {
                column.FieldName = "Text";
                column.PropertiesEdit.EncodeHtml = true;
                column.SetDataCellTemplateContent(tmpl =>
                {
                    var devExImag = string.Concat("dxIcon_", DataBinder.Eval(tmpl.DataItem, "IconCss").ToString(), " dxtv-ndImg dx-vam");

                    ViewContext.Writer.Write(
                        "<img   class=" + devExImag + "  alt=\"\" style=\"width: 16px; height: 16px; vertical-align: middle;margin-right: 4px;\" />"
                    );
                    ViewContext.Writer.Write(
                            Html.DevExpress().Label(lbl =>
                            {
                                lbl.Name = Guid.NewGuid().ToString() + "_" + DataBinder.Eval(tmpl.DataItem, "HierarchyLevel").ToString();
                                lbl.Text = DataBinder.Eval(tmpl.DataItem, column.FieldName).ToString();
                            }).GetHtml().ToHtmlString()
                        );
                });
            }
        );
    }
).BindToVirtualData((TreeListVirtualModeCreateChildrenEventArgs args) =>
{
    M4PL.Web.Providers.TreeListProvider.VirtualModeCreateChildren(args, Model.ContentRouteCallBack, Model.CommonCommands);
}, (TreeListVirtualModeNodeCreatingEventArgs argsNode) =>
{
    M4PL.Web.Providers.TreeListProvider.VirtualModeNodeCreating(argsNode, Model.ContentRouteCallBack, Model.CommonCommands);
}).GetHtml()