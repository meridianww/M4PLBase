@using System.Drawing;
@using System.Web.UI.WebControls;
@model M4PL_API.Controllers.HomeModel

<script>
    function onCommandExecuted(s, e) {
        var text = e.item.name;

        $('#lblText').text(text);
    }

</script>
@functions{
    T CreateButtonItem<T>(string name, string text, string iconID) where T : RibbonButtonItem
    {
        return CreateButtonItem<T>(name, text, RibbonItemSize.Small, iconID);
    }
    T CreateButtonItem<T>(string name, string text, RibbonItemSize size, string iconID) where T : RibbonButtonItem
    {

        var item = Activator.CreateInstance<T>();

        item.Name = name;
        item.Text = text;
        item.Size = size;
        if (size == RibbonItemSize.Large)
            item.LargeImage.IconID = iconID;
        else
            item.SmallImage.IconID = iconID;
        return item;
    }
    RibbonGalleryItem CreateGalleryItem(string text, string iconID)
    {
        var galleryItem = new RibbonGalleryItem
        {
            Text = text,
            Value = text,
            ToolTip = text
        };
        galleryItem.Image.IconID = iconID;
        return galleryItem;
    }

    RERComboBoxCommandBase PrepareComboBoxCommand(RERComboBoxCommandBase command)
    {
        command.FillItems();
        command.PropertiesComboBox.Width = Unit.Pixel(100);
        return command;
    }
}

@Html.DevExpress().Ribbon(settings =>
{
    settings.Name = "MyRibbon";
    settings.ClientSideEvents.CommandExecuted = "onCommandExecuted";
    var homeTab = settings.Tabs.Add("M4PL");
    var createTab = settings.Tabs.Add("Customer");
    var externalTab = settings.Tabs.Add("Vendors");
    var dbtTab = settings.Tabs.Add("Finance");
    var addinTab = settings.Tabs.Add("Scanner");
    var addinTab1 = settings.Tabs.Add("House Keeping");
    var addinTab2 = settings.Tabs.Add("Admin");

    homeTab.Groups.Add(vwGp =>
    {
        vwGp.Name = "view";
        vwGp.Text = "";

        vwGp.Items.Add(MVCxRibbonItemType.ButtonItem, fv =>
            {
                fv.Text = "Form View";
                fv.Name = "Form View";
                fv.Size = RibbonItemSize.Large;
                ((RibbonButtonItem)fv).LargeImage.IconID = IconID.EditNew32x32gray;
            });

        vwGp.Items.Add(MVCxRibbonItemType.ButtonItem, dsv =>
            {
                dsv.Text = "DataSheet View";
                dsv.Name = "DataSheet View";
                dsv.Size = RibbonItemSize.Large;
                ((RibbonButtonItem)dsv).LargeImage.IconID = IconID.EditNew32x32gray;
            });
    });

    homeTab.Groups.Add(cbGp =>
     {
         cbGp.Name = "Clipboard";
         cbGp.Text = "Clipboard";
         cbGp.Image.IconID = IconID.ReportsReport32x32;
         cbGp.ShowDialogBoxLauncher = true;

         cbGp.Items.Add(new RERPasteCommand(RibbonItemSize.Large) { Text = "Paste", ToolTip = "Ctrl + V" });
         cbGp.Items.Add(new RERCutCommand(RibbonItemSize.Small) { Text = "Cut", ToolTip = "Ctrl + X" });
         cbGp.Items.Add(new RERCopyCommand(RibbonItemSize.Small) { Text = "Copy", ToolTip = "Ctrl + C" });
     });

    homeTab.Groups.Add(sfGp =>
    {
        sfGp.Name = "SortFilter";
        sfGp.Text = "Sort & Filter";
        sfGp.Image.IconID = IconID.ReportsReport32x32;
        sfGp.ShowDialogBoxLauncher = true;


        sfGp.Items.Add(CreateButtonItem<RibbonDropDownButtonItem>("Filter", "Filter", RibbonItemSize.Large, IconID.FilterFilter32x32));

        sfGp.Items.Add(CreateButtonItem<RibbonButtonItem>("Ascending", "Ascending", IconID.DataSortasc16x16office2013));
        sfGp.Items.Add(CreateButtonItem<RibbonButtonItem>("Decending", "Decending", IconID.DataSortdesc16x16office2013));
        sfGp.Items.Add(CreateButtonItem<RibbonButtonItem>("RemoveSort", "Remove Sort", IconID.DataSortasc16x16gray));

        sfGp.Items.Add(CreateButtonItem<RibbonButtonItem>("Selection", "Selection", IconID.DataSelectdata16x16));
        sfGp.Items.Add(CreateButtonItem<RibbonButtonItem>("Advanced", "Advanced", IconID.ActionsFilter16x16devav));
        sfGp.Items.Add(CreateButtonItem<RibbonButtonItem>("ToggleFilter", "Toggle Filter", IconID.FilterFilter16x16));

    });

    homeTab.Groups.Add(rdGp =>
 {
     rdGp.Name = "Records";
     rdGp.Text = "Records";
     rdGp.Image.IconID = IconID.ReportsReport32x32;
     rdGp.ShowDialogBoxLauncher = true;

     rdGp.Items.Add(CreateButtonItem<RibbonDropDownButtonItem>("RefreshAll", "Refresh All", RibbonItemSize.Large, IconID.ActionsRefresh32x32office2013));

     rdGp.Items.Add(CreateButtonItem<RibbonButtonItem>("New", "New", IconID.ActionsInsert16x16office2013));
     rdGp.Items.Add(CreateButtonItem<RibbonButtonItem>("Save", "Save", IconID.ActionsSave16x16devav));
     rdGp.Items.Add(CreateButtonItem<RibbonButtonItem>("Delete", "Delete", IconID.EditDelete16x16));

     rdGp.Items.Add(CreateButtonItem<RibbonButtonItem>("Totals", "Totals", IconID.DataSummary16x16office2013));
     rdGp.Items.Add(CreateButtonItem<RibbonButtonItem>("Spelling", "Spelling", IconID.FormatSpellcheckasyoutype16x16office2013));
     rdGp.Items.Add(CreateButtonItem<RibbonButtonItem>("More", "More", IconID.ArrangeMorelayoutoptions16x16));
 });

    homeTab.Groups.Add(fdGp =>
 {
     fdGp.Name = "Find";
     fdGp.Text = "Find";
     fdGp.Image.IconID = IconID.ReportsReport32x32;
     fdGp.ShowDialogBoxLauncher = true;

     fdGp.Items.Add(CreateButtonItem<RibbonDropDownButtonItem>("Find", "Find", RibbonItemSize.Large, IconID.FindFind32x32));

     fdGp.Items.Add(CreateButtonItem<RibbonButtonItem>("Replace", "Replace", IconID.FormatReplace16x16));
     fdGp.Items.Add(CreateButtonItem<RibbonButtonItem>("GoTo", "Go To", IconID.ArrowsNext16x16office2013));
     fdGp.Items.Add(CreateButtonItem<RibbonButtonItem>("Select", "Select", IconID.ActionsSelect16x16office2013));
 });

    homeTab.Groups.Add(tfGp =>
 {
     tfGp.Name = "TextFormatting";
     tfGp.Text = "Text Formatting";
     tfGp.Image.IconID = IconID.ReportsReport32x32;
     tfGp.ShowDialogBoxLauncher = true;

     tfGp.Items.Add(PrepareComboBoxCommand(new RERFontNameCommand()));
     tfGp.Items.Add(PrepareComboBoxCommand(new RERFontSizeCommand()));

     tfGp.Items.Add(new RERFontBoldCommand(RibbonItemSize.Small) { Text = "", ToolTip = "Ctrl + B" });
     tfGp.Items.Add(new RERFontItalicCommand(RibbonItemSize.Small) { Text = "", ToolTip = "Ctrl + B" });
     tfGp.Items.Add(new RERFontUnderlineCommand(RibbonItemSize.Small) { Text = "", ToolTip = "Ctrl + U" });

     tfGp.Items.Add(new RERIncreaseFontSizeCommand(RibbonItemSize.Small) { Text = "", ToolTip = "Increase Size" });
     tfGp.Items.Add(new RERDecreaseFontSizeCommand(RibbonItemSize.Small) { Text = "", ToolTip = "Decrease Size" });

     tfGp.Items.Add(new RERFontColorCommand(RibbonItemSize.Small) { Text = "", ToolTip = "Font Color" });
     tfGp.Items.Add(new RERFontBackColorCommand() { Size = RibbonItemSize.Small, Text = "", ToolTip = "Background Color" });

     tfGp.Items.Add(new RERBulletedListCommand() { Size = RibbonItemSize.Small, Text = "", ToolTip = "Bulleted List" });
     tfGp.Items.Add(new RERNumberingListCommand() { Size = RibbonItemSize.Small, Text = "", ToolTip = "Numbering List" });
     tfGp.Items.Add(new RERDecreaseIndentCommand() { Size = RibbonItemSize.Small, Text = "", ToolTip = "Decrease Indent" });
     tfGp.Items.Add(new RERIncreaseIndentCommand() { Size = RibbonItemSize.Small, Text = "", ToolTip = "Increase Indent" });

     tfGp.Items.Add(new RERAlignLeftCommand() { Size = RibbonItemSize.Small, Text = "", ToolTip = "Align left", SubGroupName = "Align" });
     tfGp.Items.Add(new RERAlignCenterCommand() { Size = RibbonItemSize.Small, Text = "", ToolTip = "Align Center", SubGroupName = "Align" });
     tfGp.Items.Add(new RERAlignRightCommand() { Size = RibbonItemSize.Small, Text = "", ToolTip = "Align Right", SubGroupName = "Align" });
     tfGp.Items.Add(new RERAlignJustifyCommand() { Size = RibbonItemSize.Small, Text = "", ToolTip = "Align Justify", SubGroupName = "Align" });

 });

}).GetHtml()

<br />
@*@Html.DevExpress().FormLayout(settings =>
    {
        settings.Name = "FormLayout1";

        // Creating layout items bound to the Model class properties


    }).GetHtml();*@

@*added by janardana*@

<div style="clear:both"></div>
@Html.DevExpress().Splitter(settings =>
{
    settings.Name = "splOverview";
    //settings.Height = Unit.Percentage(100);
    settings.FullscreenMode = true;


    settings.Panes.Add(pane =>
    {
        pane.Size = Unit.Percentage(16);
        pane.SetContent(() =>
        {

            Html.DevExpress().NavBar(set =>
            {
                set.Name = "nbOverview";
                set.Groups.Add(group =>
                {
                    group.Text = "Demos";
                    //group.Items.Add("Programs", "","~/Images/BarStacked.png");
                    group.Items.Add("Customer", "", "");
                    //group.Items.Add("Scheduler", "", "", "Home/SchedulerPartial", "_blank");
                    group.Items.Add("Report", "", "", "Home/Report", "_blank");
                    group.Items.Add("PivotGrid Report", "", "", "Home/PivotGrid", "_blank");
                });


                set.Groups.Add(group =>
                {
                    group.Text = "Features";
                    //group.Items.Add("Programs", "","~/Images/BarStacked.png");
                    group.Items.Add("Programs", "", "");
                    group.Items.Add("Delivery", "", "");
                    group.Items.Add("Cost Ledger", "", "");
                    group.Items.Add("Check Gateways", "", "");
                    group.Items.Add("Calculator", "", "");
                    group.Items.Add("Dashboard", "", "");
                    group.Items.Add("By Issue", "", "");
                    group.Items.Add("By Del.Date", "", "");
                    group.Items.Add("Delivery Report", "", "");
                });

                set.Groups.Add(group =>
                {
                    group.Text = "Program Reference";
                    group.Items.Add("Gateway", "", "");
                    group.Items.Add("Attributes", "", "");
                    group.Items.Add("Program Roles", "", "");
                    group.Items.Add("Master Contacts", "", "");
                    group.Items.Add("Cost Ledger", "", "");
                });
            }).GetHtml();

            @Html.DevExpress().TreeView(treeSettings =>
            {
                treeSettings.Name = "tvOverview";
                treeSettings.Nodes.Add(node =>
                {
                    node.Text = "Quit";
                    node.Expanded = false;
                });
            }).GetHtml();

        });
    });




    settings.Panes.Add(pane =>
    {
        pane.Name = "gridContainer";
        pane.Size = Unit.Percentage(74);
        pane.MinSize = 100;
        pane.SetContent(() =>
        {
            Html.RenderPartial("HomePartial", Model);
        });
    });
}).GetHtml()


<div style="clear:both"></div>



@*end*@



@*</body>
    </html>*@



